[{"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js":"1","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/api.generated.ts":"2","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx":"3","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx":"4","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx":"5","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx":"6","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx":"7","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx":"8","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx":"9"},{"size":4013,"mtime":1609345184850,"results":"10","hashOfConfig":"11"},{"size":6806,"mtime":1609536091440,"results":"12","hashOfConfig":"11"},{"size":687,"mtime":1609594637990,"results":"13","hashOfConfig":"11"},{"size":1720,"mtime":1609594894039,"results":"14","hashOfConfig":"11"},{"size":537,"mtime":1609609774645,"results":"15","hashOfConfig":"11"},{"size":791,"mtime":1609609356741,"results":"16","hashOfConfig":"11"},{"size":355,"mtime":1609345184842,"results":"17","hashOfConfig":"11"},{"size":1559,"mtime":1609609245813,"results":"18","hashOfConfig":"11"},{"size":1689,"mtime":1609609623409,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"16c9n8r",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js",[],["42","43","44"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/api.generated.ts",[],["45","46","47"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx",["48"],"import React, { Component } from 'react';\nimport { WeatherForecastClient, WeatherForecast } from '../api.generated';\n\nexport class FetchData extends React.Component<any, any> {\n  static displayName = FetchData.name;\n\n  constructor(props : any) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts : WeatherForecast[]) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date.toString()}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const data = await new WeatherForecastClient().get();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx",[],["49","50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"52","replacedBy":"63"},{"ruleId":"54","replacedBy":"64"},{"ruleId":"56","replacedBy":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar",["66"],["67"],[],"no-global-assign","no-unsafe-negation"]