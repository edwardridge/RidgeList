[{"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\index.tsx":"1","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\registerServiceWorker.js":"2","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\App.tsx":"3","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\IWishlistRepository.ts":"4","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Layout.tsx":"5","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Logout.tsx":"6","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Login.tsx":"7","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\nswag\\api.generated.ts":"8","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistHomepage.tsx":"9","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\Wishlist.tsx":"10","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useLogin.ts":"11","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\NavMenu.tsx":"12","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\useWishlistClient.tsx":"13","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\OtherPersonWishlistRow.tsx":"14","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistPersonRow.tsx":"15"},{"size":555,"mtime":1610113556479,"results":"16","hashOfConfig":"17"},{"size":4121,"mtime":1610113556480,"results":"18","hashOfConfig":"17"},{"size":1093,"mtime":1611609766838,"results":"19","hashOfConfig":"17"},{"size":363,"mtime":1611609766882,"results":"20","hashOfConfig":"17"},{"size":373,"mtime":1610113556477,"results":"21","hashOfConfig":"17"},{"size":273,"mtime":1611609766869,"results":"22","hashOfConfig":"17"},{"size":1668,"mtime":1611609766852,"results":"23","hashOfConfig":"17"},{"size":22327,"mtime":1611755726070,"results":"24","hashOfConfig":"17"},{"size":3761,"mtime":1611755726042,"results":"25","hashOfConfig":"17"},{"size":6804,"mtime":1611755726031,"results":"26","hashOfConfig":"17"},{"size":1341,"mtime":1611609767004,"results":"27","hashOfConfig":"17"},{"size":1594,"mtime":1611609766871,"results":"28","hashOfConfig":"17"},{"size":138,"mtime":1611755726061,"results":"29","hashOfConfig":"17"},{"size":2960,"mtime":1611755726025,"results":"30","hashOfConfig":"17"},{"size":3702,"mtime":1611755726048,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"90n24z",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\index.tsx",[],["69","70","71"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\registerServiceWorker.js",[],["72","73","74"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\App.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\IWishlistRepository.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Layout.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Logout.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Login.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\nswag\\api.generated.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistHomepage.tsx",["75","76","77","78"],"import React, {ChangeEvent, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {WishlistClient, WishlistSummaryModel} from \"../../nswag/api.generated\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './WishlistSummary.css';\r\nimport { useGetLogin } from \"../useLogin\";\r\nimport { Modal, ModalDialog, Button } from \"react-bootstrap\"\r\n\r\ninterface WishlishHomepageProps{\r\n    wishlistClient: WishlistClient;\r\n}\r\n\r\nexport const WishlistHomepage = (props : WishlishHomepageProps) => {\r\n    const [creating, setCreating] = useState(false);\r\n    const [nameOfNewWishlist, setNameOfNewWishlist] = useState(\"\");\r\n    const [creatorIsGiftee, setCreatorIsGiftee] = useState(true);\r\n    const [wishlistSummaries, setWishlistSummaries] = useState([] as WishlistSummaryModel[]);\r\n    const history = useHistory();\r\n    const login = useGetLogin(false);\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        loadWishListSummaries(login.Email);\r\n    }, [wishlistSummaries.length]);\r\n\r\n    let onClickCancel = () => {\r\n        setNameOfNewWishlist(\"\");\r\n        setShow(false);\r\n    }\r\n    \r\n    let onClickCreate = async () => {\r\n        let newWishlist = await props.wishlistClient.create(nameOfNewWishlist, login.Email, login.Name, creatorIsGiftee);\r\n        setCreating(false);\r\n        history.push(\"/wishlist/\" + newWishlist.id);\r\n        setShow(false);\r\n    }\r\n\r\n    let handleInputChange = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setNameOfNewWishlist(event.target.value);\r\n    }\r\n    \r\n    let loadWishListSummaries = async (email : string) => {\r\n        var summaries = await props.wishlistClient.getSummaries(email);\r\n        setWishlistSummaries(summaries);\r\n    }\r\n    \r\n    let onClickAddWishlist = () => {\r\n        setShow(true);\r\n    }\r\n    \r\n    let createButtons = <>\r\n        <Button className='w-100' variant=\"outline-primary\" cypress-name='CreateNewWishlist' onClick={onClickAddWishlist}>\r\n            Create New...\r\n        </Button>\r\n\r\n        <Modal show={show} onHide={onClickCancel}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Create New Wishlist</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <input type=\"text\" className='w-100' value={nameOfNewWishlist} onChange={handleInputChange} placeholder='Name of wishlist...' cypress-name='NameOfWishlist'></input>\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" type=\"checkbox\" checked={creatorIsGiftee} id=\"areTheyGiftee\" onChange={(e) => {setCreatorIsGiftee(e.target.checked)}}/>\r\n                    <label className=\"form-check-label\" htmlFor=\"areTheyGiftee\">\r\n                        Are you receiving gifts?\r\n                    </label>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClickCancel}>\r\n                    Close\r\n          </Button>\r\n                <Button variant=\"primary\" cypress-name='Create' onClick={onClickCreate}>\r\n                    Create\r\n          </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </>\r\n\r\n    let summaries =\r\n        <div className='wishlistSummaries'>\r\n            {\r\n                wishlistSummaries.map(s =>\r\n                    <Link key={s.name} to={`wishlist/${s.id}`}> <div key={s.name} className='wishlistSummaryItem'>{s.name}</div></Link>)\r\n            }\r\n            <a>\r\n                \r\n            </a>\r\n        </div>\r\n\r\n    return (\r\n        <div>\r\n            <h2 className='text-center'>Your Wishlists</h2>\r\n\r\n            <div>\r\n                {createButtons}\r\n            </div>\r\n            { summaries }\r\n        </div>\r\n    );\r\n}","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\Wishlist.tsx",["79","80","81"],"import React, {useState, useEffect, ChangeEvent} from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\r\nimport {IWishlistRepository} from \"./IWishlistRepository\";\r\nimport \"./WishlistSummary.css\";\r\nimport { useGetLogin } from \"../useLogin\";\r\nimport {WishlistPersonRow} from \"./WishlistPersonRow\";\r\nimport {OtherPersonWishlistRow} from \"./OtherPersonWishlistRow\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport {useWishlistClient} from \"./useWishlistClient\";\r\n\r\ninterface WishlistProps {\r\n    id: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<WishlistProps> {\r\n    wishlistRepository : IWishlistRepository;\r\n}\r\n\r\n const Wishlist = (props : Props) => {\r\n     const [wishlist, setWishlist] = useState<WishlistModel|null>(null);\r\n     const [newPersonName, setNewPersonName] = useState(\"\");\r\n     const [newPersonEmail, setNewPersonEmail] = useState(\"\");\r\n     const [newPersonIsGiftee, setNewPersonIsGiftee] = useState(true);    \r\n     const [addingNewPerson, setAddingNewPerson] = useState(false);\r\n     const login = useGetLogin(false);\r\n     let [addingNewPersonButtonDisabled, setAddingNewPersonButtonDisabled] = useState(false);\r\n     let wishlistClient = useWishlistClient();\r\n    \r\n     useEffect(() => {\r\n        let id = props.match.params.id;\r\n        props.wishlistRepository.getWishlist(id).then(s => { \r\n            setWishlist(s);\r\n        });\r\n         \r\n     }, [wishlist?.id]);\r\n    \r\n     let createNewPersonClick = async () => {\r\n        var newWishlist = await wishlistClient.addPerson(wishlist?.id, newPersonEmail, newPersonName, newPersonIsGiftee);\r\n        setWishlist(newWishlist);\r\n        setNewPersonName(\"\");\r\n        setNewPersonEmail(\"\");\r\n        setAddingNewPerson(false);\r\n    }\r\n    \r\n     let addPersonButtonShouldBeDisabled = () => {\r\n         return wishlist?.people?.some(s => s.email === login.Email);\r\n     }\r\n     \r\n     let changeNewEmail = (event : ChangeEvent<HTMLInputElement>) => {\r\n         let npe = event.target.value;\r\n         setNewPersonEmail(event.target.value);\r\n         let f = wishlist?.people?.some(s => s.email === npe) ?? false;\r\n         setAddingNewPersonButtonDisabled(f);\r\n     }\r\n\r\n    if (wishlist) {\r\n        let onCLickCancelAddNewPerson = () => {\r\n            setAddingNewPerson(false);\r\n            setNewPersonName(\"\");\r\n        }\r\n        \r\n        let loggedInWishlist = wishlist.people?.find(s => s.email === login.Email) ?? {} as WishlistPersonModel;\r\n        let otherGiftees = wishlist.people?.filter(s => s.email !== login.Email && s.giftee === true);\r\n        let otherNonGiftees = wishlist.people?.filter(s => s.email !== login.Email && s.giftee === false);\r\n        \r\n        let createNewPerson = (\r\n            <>\r\n                <Button variant=\"outline-dark\" cypress-name='AddNewPerson' className='w-100' onClick={() => setAddingNewPerson(true)}>\r\n                Add Someone New\r\n                </Button>\r\n\r\n                <Modal show={addingNewPerson} onHide={onCLickCancelAddNewPerson}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Somone New!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <input type=\"text\" className='form-control w-100' onChange={(event) => setNewPersonName(event.target.value)}\r\n                            value={newPersonName} placeholder=\"What's their name?\" cypress-name='NewPersonName'></input>\r\n                        <input type=\"text\" className='form-control w-100 mt-2' onChange={changeNewEmail}\r\n                            value={newPersonEmail} placeholder=\"What's their email?\" cypress-name='NewPersonEmail'></input>\r\n\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" checked={newPersonIsGiftee} id=\"areTheyGiftee\" onChange={(e) => {setNewPersonIsGiftee(e.target.checked)}}/>\r\n                                <label className=\"form-check-label\" htmlFor=\"areTheyGiftee\">\r\n                                    Are they receiving gifts?   \r\n                                </label>\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={onCLickCancelAddNewPerson}>\r\n                        Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" disabled={addingNewPersonButtonDisabled} onClick={createNewPersonClick} cypress-name='CreateNewPerson'>\r\n                        Add\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        )\r\n        \r\n        let listOfOtherPeoplesIdeas = (\r\n            \r\n            <div className='wishlistSummaries' cypress-name=\"ListOfPeople\">\r\n                {\r\n                    otherGiftees?.map((s) => \r\n                        <OtherPersonWishlistRow \r\n                            cypress-name='WishlistPerson'\r\n                            key={s.email} \r\n                            wishlistPerson={s} \r\n                            wishlistId={wishlist?.id} \r\n                            loggedInEmail={login.Email}\r\n                            setWishlist={setWishlist}></OtherPersonWishlistRow> )\r\n                }\r\n            </div>)\r\n        \r\n        return (\r\n            <div>\r\n                <h1 className='text-center' id=\"wishlistTitle\">Wishlist - {wishlist.name}</h1>\r\n                \r\n                <div>\r\n                    <h4 className='text-center mt-4'>What would you like?</h4>\r\n                    <WishlistPersonRow cypress-name='WishlistPerson' wishlistPerson={loggedInWishlist} wishlistId={wishlist.id} setWishlist={setWishlist} loginDetails={login}></WishlistPersonRow>\r\n                </div>\r\n                <div className='mt-5'>\r\n                    <h4 className='text-center mt-4'>Other giftees wishlists</h4>\r\n                    \r\n                    {listOfOtherPeoplesIdeas}\r\n                </div>\r\n                <div className='mt-5'>\r\n                    <h4 className='text-center mt-4'>Non gift receivers</h4>\r\n                    <table className='table'>\r\n                    {otherNonGiftees?.map(nonGiftee => {\r\n                        return <tr key={nonGiftee.email}>\r\n                            <td>{nonGiftee.name}</td>\r\n                        </tr>;\r\n                    })}\r\n                    </table>\r\n                </div>\r\n                <div className='mt-5'> {createNewPerson}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>Loading...</div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Wishlist);","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useLogin.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\NavMenu.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\useWishlistClient.tsx",[],["82","83","84"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\OtherPersonWishlistRow.tsx",["85"],"import {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\r\nimport React from \"react\";\r\nimport {useWishlistClient} from \"./useWishlistClient\";\r\nimport Linkify from \"react-linkify\";\r\n\r\ninterface OtherPersonWishlistRowProps{\r\n    wishlistPerson : WishlistPersonModel;\r\n    loggedInEmail : string;\r\n    wishlistId: string;\r\n    setWishlist: (wishlist : WishlistModel) => void;\r\n}\r\n\r\nexport const OtherPersonWishlistRow = (props : OtherPersonWishlistRowProps) => {\r\n    let wishlistClient = useWishlistClient();\r\n    \r\n    let claimPresentClick = async (presentId : string) => {\r\n        let wishlist = await wishlistClient\r\n            .claimPresent(props.wishlistId, props.loggedInEmail, presentId);\r\n        props.setWishlist(wishlist);\r\n    }\r\n\r\n    let unclaimPresentClick = async (presentId : string) => {\r\n        let wishlist = await wishlistClient\r\n            .unclaimPresent(props.wishlistId, presentId);\r\n        props.setWishlist(wishlist);\r\n    }\r\n    let getPresentIdeas = () => {\r\n        if(props.wishlistPerson.presentIdeas?.length === 0){\r\n            return <div className='lightGrey text-center'>They haven't added any gift ideas yet!</div>\r\n        }\r\n        return props.wishlistPerson.presentIdeas?.map(s => {\r\n            let claimed = s.claimerEmail !== null && s.claimerEmail !== '';\r\n            let claimedByYou = s.claimerEmail === props.loggedInEmail;\r\n            let unclaim = claimedByYou ? <button className='btn btn-outline-danger w-100'\r\n                                                 onClick={() => unclaimPresentClick(s.id)}>Unclaim</button> : null;\r\n            let claimerText = claimed ? `- claimed by ${claimedByYou ? \"you\" : s.claimerName}` : '';\r\n            let claimSection = s.claimerName ?\r\n                <>{unclaim}</> :\r\n                <button className='btn btn-outline-success w-100'\r\n                        onClick={() => claimPresentClick(s.id)}>Claim</button>;\r\n\r\n            let classes = `mt-1 ml-0 mr-0 row ${claimed ? 'claimed' : ''}`;\r\n            return (\r\n                <tr key={s.id} className={classes}>\r\n                    <td className='col-8 col-md-10' cypress-name={`${s.id}-description`}>\r\n                        <Linkify>{s.description} {claimerText}</Linkify></td>\r\n                    <td className='col-4 col-md-2 text-right' cypress-name={`${s.id}-buttons`}>{claimSection}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <div className='wishlistSummaryItem mb-3' key={`${props.wishlistPerson.email}`}>\r\n            <div>\r\n                <span className='d-inline-block col-12 text-center'>\r\n                    {props.wishlistPerson.name}\r\n                    <span className='emailDetails'> ({props.wishlistPerson.email})</span>\r\n                </span>\r\n            </div>\r\n            <table className='table'>\r\n                {getPresentIdeas()}\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistPersonRow.tsx",["86"],"import React, {useState} from \"react\";\r\nimport { LoginDetails } from \"../useLogin\";\r\nimport {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport {useWishlistClient} from \"./useWishlistClient\";\r\nimport Linkify from \"react-linkify\";\r\n\r\ninterface WishlistPersonRowProps{\r\n    loginDetails : LoginDetails;\r\n    wishlistPerson : WishlistPersonModel;\r\n    wishlistId: string;\r\n    setWishlist: (wishlist : WishlistModel) => void;\r\n}\r\n\r\nexport const WishlistPersonRow = (props : WishlistPersonRowProps) => {\r\n    const [newItemDescription, setNewItemDescription] = useState(\"\");\r\n    const [showAddItem, setShowAddItem] = useState(false);\r\n    const wishlistClient = useWishlistClient();\r\n    \r\n    let clickAddItem = async (closeAddItem: boolean) => {\r\n        let wishlist = await wishlistClient.addPresentIdea(props.wishlistId, props.loginDetails.Email, newItemDescription);\r\n        props.setWishlist(wishlist);\r\n        setNewItemDescription(\"\");\r\n        if (closeAddItem)\r\n            setShowAddItem(false);\r\n    }\r\n\r\n    let removePresentIdea = async (id: string) => {\r\n        let wishlist = await wishlistClient.removePresentIdea(props.wishlistId, props.loginDetails.Email, id);\r\n        props.setWishlist(wishlist);\r\n    }\r\n\r\n    let onClickCancelAddItem = () => {\r\n        setShowAddItem(false);\r\n    }\r\n\r\n    let addItems = (\r\n        <>\r\n            \r\n            <table className='table'>\r\n                {props.wishlistPerson.presentIdeas?.map(s => {\r\n                    // @ts-ignore\r\n                    return (\r\n                        <tr className='row mt-2' key={s.id}>\r\n                            <td className='col-8 col-md-10'><Linkify>{s.description}</Linkify></td>\r\n                            <td className='col-4 col-md-2'>\r\n                                <button className='btn btn-outline-danger w-100' onClick={() => removePresentIdea(s.id)}>Remove</button>\r\n                            </td>\r\n                        </tr>)\r\n                })}\r\n            </table>\r\n            <div className='mt-2'>\r\n                \r\n                <Button variant=\"outline-primary\" cypress-name='AddNewItemButton' className='w-100' onClick={() => { setShowAddItem(true) }}>\r\n                    Add New Item\r\n                </Button>\r\n\r\n                <Modal show={showAddItem} onHide={onClickCancelAddItem}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New Item!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <textarea className='form-control w-100' value={newItemDescription} onChange={(event) => { setNewItemDescription(event.target.value) }} placeholder='What would you like?' cypress-name='AddItem'></textarea>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={onClickCancelAddItem}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={() => { clickAddItem(false) }}>\r\n                            Save And Add More\r\n                        </Button>\r\n                        <Button variant=\"primary\" cypress-name='SaveItemButton' onClick={() => { clickAddItem(true) }}>\r\n                            Save And Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                \r\n            </div>\r\n    </>\r\n    );\r\n   \r\n    return (\r\n        \r\n        <div className='' key={`${props.wishlistPerson.email}`}>\r\n            {addItems}\r\n        </div>\r\n    )\r\n}",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":7,"column":17,"nodeType":"96","messageId":"97","endLine":7,"endColumn":28},{"ruleId":"94","severity":1,"message":"98","line":14,"column":12,"nodeType":"96","messageId":"97","endLine":14,"endColumn":20},{"ruleId":"99","severity":1,"message":"100","line":24,"column":8,"nodeType":"101","endLine":24,"endColumn":34,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":86,"column":13,"nodeType":"105","endLine":86,"endColumn":16},{"ruleId":"94","severity":1,"message":"106","line":3,"column":9,"nodeType":"96","messageId":"97","endLine":3,"endColumn":23},{"ruleId":"99","severity":1,"message":"107","line":36,"column":9,"nodeType":"101","endLine":36,"endColumn":23,"suggestions":"108"},{"ruleId":"94","severity":1,"message":"109","line":46,"column":10,"nodeType":"96","messageId":"97","endLine":46,"endColumn":41},{"ruleId":"87","replacedBy":"110"},{"ruleId":"89","replacedBy":"111"},{"ruleId":"91","replacedBy":"112"},{"ruleId":"94","severity":1,"message":"106","line":1,"column":9,"nodeType":"96","messageId":"97","endLine":1,"endColumn":23},{"ruleId":"94","severity":1,"message":"106","line":3,"column":9,"nodeType":"96","messageId":"97","endLine":3,"endColumn":23},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'ModalDialog' is defined but never used.","Identifier","unusedVar","'creating' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadWishListSummaries' and 'login.Email'. Either include them or remove the dependency array.","ArrayExpression",["115"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'WishlistClient' is defined but never used.","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.wishlistRepository'. Either include them or remove the dependency array.",["116"],"'addPersonButtonShouldBeDisabled' is assigned a value but never used.",["113"],["114"],[],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [loadWishListSummaries, login.Email, wishlistSummaries.length]",{"range":"121","text":"122"},"Update the dependencies array to be: [props.match.params.id, props.wishlistRepository, wishlist.id]",{"range":"123","text":"124"},[1005,1031],"[loadWishListSummaries, login.Email, wishlistSummaries.length]",[1519,1533],"[props.match.params.id, props.wishlistRepository, wishlist.id]"]