[{"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js":"1","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx":"2","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx":"3","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx":"4","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx":"5","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx":"6","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx":"7","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx":"8","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx":"9","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts":"10","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx":"11"},{"size":4013,"mtime":1609345184850,"results":"12","hashOfConfig":"13"},{"size":1040,"mtime":1609693737728,"results":"14","hashOfConfig":"13"},{"size":1720,"mtime":1609594894039,"results":"15","hashOfConfig":"13"},{"size":537,"mtime":1609609774645,"results":"16","hashOfConfig":"13"},{"size":791,"mtime":1609609356741,"results":"17","hashOfConfig":"13"},{"size":355,"mtime":1609345184842,"results":"18","hashOfConfig":"13"},{"size":1565,"mtime":1609610983477,"results":"19","hashOfConfig":"13"},{"size":1383,"mtime":1609633918480,"results":"20","hashOfConfig":"13"},{"size":2574,"mtime":1609695382397,"results":"21","hashOfConfig":"13"},{"size":11583,"mtime":1609695841884,"results":"22","hashOfConfig":"13"},{"size":1430,"mtime":1609696065102,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"16c9n8r",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"29"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js",[],["50","51","52"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx",[],["53","54","55"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx",["56"],"import React, { Component } from 'react';\nimport { WeatherForecastClient, WeatherForecast } from '../nswag/api.generated';\n\nexport class FetchData extends React.Component<any, any> {\n  static displayName = FetchData.name;\n\n  constructor(props : any) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts : WeatherForecast[]) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date.toString()}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const data = await new WeatherForecastClient().get();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx",["57"],"import React, {ChangeEvent} from \"react\";\nimport {WishlistClient, WishlistModel, WishlistSummaryModel} from \"../../nswag/api.generated\";\nimport {Link} from \"react-router-dom\";\n\ninterface WishlishHomepageProps{\n    wishlistClient: WishlistClient;\n}\n\ninterface WishlishHomepageState{\n    creating : boolean;\n    nameOfNewWishlist : string;\n    wishlistSummaries : WishlistSummaryModel[];\n}\n\nexport class WishlistHomepage extends React.Component<WishlishHomepageProps, WishlishHomepageState>{\n    constructor(props : WishlishHomepageProps) {\n        super(props);\n        \n        this.state = {\n            creating: false,\n            nameOfNewWishlist: '',\n            wishlistSummaries: []\n        };\n\n        this.onClickNewWishlist = this.onClickNewWishlist.bind(this);\n        this.onClickCreate = this.onClickCreate.bind(this);        \n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n    \n    onClickNewWishlist = () => \n    {\n        this.setState({\n           creating: true\n        });\n    }\n    \n    onClickCreate = async () => \n    {\n        await this.props.wishlistClient.create(this.state.nameOfNewWishlist);\n        this.setState({\n            creating: false\n        });\n        this.loadWishListSummaries();\n    }\n\n    handleInputChange(event : ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            nameOfNewWishlist: event.target.value\n        });\n    }\n    \n    loadWishListSummaries = async () => {\n        var summaries = await this.props.wishlistClient.getSummaries();\n        this.setState({\n            wishlistSummaries: summaries\n        });\n    }\n    \n    componentDidMount() {\n        this.loadWishListSummaries();\n    }\n\n    render() {\n        let createButtons;\n        if(!this.state.creating){\n            createButtons = <button onClick={this.onClickNewWishlist}>Create New Wishlist</button>\n        }\n        else{\n            createButtons = <div><input type=\"text\" value={this.state.nameOfNewWishlist} onChange={this.handleInputChange} placeholder='Name of wishlist...'></input> <button onClick={this.onClickCreate}>Create</button></div>\n        }\n        \n        let summaries = \n            <ul> \n                {\n                    this.state.wishlistSummaries.map(s => \n                    <li key={s.name}>\n                        <Link to={`wishlist/${s.id}`}> {s.name}</Link>   \n                    </li>) \n                }\n            </ul>\n        \n        return (\n            <div>\n                { createButtons }\n                { summaries }\n            </div>\n        );\n    }\n}","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx",["58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"71","line":2,"column":25,"nodeType":"69","messageId":"70","endLine":2,"endColumn":38},{"ruleId":"67","severity":1,"message":"72","line":2,"column":30,"nodeType":"69","messageId":"70","endLine":2,"endColumn":39},{"ruleId":"67","severity":1,"message":"73","line":2,"column":41,"nodeType":"69","messageId":"70","endLine":2,"endColumn":51},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'WishlistModel' is defined but never used.","'useParams' is defined but never used.","'withRouter' is defined but never used.","no-global-assign","no-unsafe-negation"]