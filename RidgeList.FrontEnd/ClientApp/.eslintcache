[{"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx":"1","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js":"2","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx":"3","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts":"4","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts":"5","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx":"6","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Logout.tsx":"7","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Login.tsx":"8","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx":"9","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx":"10","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/useLogin.ts":"11","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx":"12","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistPersonRow.tsx":"13","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/OtherPersonWishlistRow.tsx":"14","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/useWishlistClient.tsx":"15"},{"size":537,"mtime":1609609774645,"results":"16","hashOfConfig":"17"},{"size":4013,"mtime":1609345184850,"results":"18","hashOfConfig":"17"},{"size":1063,"mtime":1610905123636,"results":"19","hashOfConfig":"17"},{"size":21252,"mtime":1611694525308,"results":"20","hashOfConfig":"17"},{"size":352,"mtime":1610299894310,"results":"21","hashOfConfig":"17"},{"size":355,"mtime":1609345184842,"results":"22","hashOfConfig":"17"},{"size":262,"mtime":1610904925612,"results":"23","hashOfConfig":"17"},{"size":1632,"mtime":1610904912003,"results":"24","hashOfConfig":"17"},{"size":3175,"mtime":1611687879699,"results":"25","hashOfConfig":"17"},{"size":5377,"mtime":1611690081114,"results":"26","hashOfConfig":"17"},{"size":1294,"mtime":1610905080553,"results":"27","hashOfConfig":"17"},{"size":1540,"mtime":1610544692379,"results":"28","hashOfConfig":"17"},{"size":3615,"mtime":1611734873051,"results":"29","hashOfConfig":"17"},{"size":2610,"mtime":1611733547810,"results":"30","hashOfConfig":"17"},{"size":134,"mtime":1611733504315,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"16c9n8r",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx",[],["66","67","68"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js",[],["69","70","71"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Logout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Login.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx",["72","73","74","75"],"import React, {ChangeEvent, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {WishlistClient, WishlistSummaryModel} from \"../../nswag/api.generated\";\nimport { Link } from \"react-router-dom\";\nimport './WishlistSummary.css';\nimport { useGetLogin } from \"../useLogin\";\nimport { Modal, ModalDialog, Button } from \"react-bootstrap\"\n\ninterface WishlishHomepageProps{\n    wishlistClient: WishlistClient;\n}\n\nexport const WishlistHomepage = (props : WishlishHomepageProps) => {\n    const [creating, setCreating] = useState(false);\n    const [nameOfNewWishlist, setNameOfNewWishlist] = useState(\"\");\n    const [wishlistSummaries, setWishlistSummaries] = useState([] as WishlistSummaryModel[]);\n    const history = useHistory();\n    const login = useGetLogin(false);\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        loadWishListSummaries(login.Email);\n    }, [wishlistSummaries.length]);\n\n    let onClickCancel = () => {\n        setNameOfNewWishlist(\"\");\n        setShow(false);\n    }\n    \n    let onClickCreate = async () => {\n        let newWishlist = await props.wishlistClient.create(nameOfNewWishlist, login.Email, login.Name);\n        setCreating(false);\n        history.push(\"/wishlist/\" + newWishlist.id);\n        setShow(false);\n    }\n\n    let handleInputChange = (event : ChangeEvent<HTMLInputElement>) => {\n        setNameOfNewWishlist(event.target.value);\n    }\n    \n    let loadWishListSummaries = async (email : string) => {\n        var summaries = await props.wishlistClient.getSummaries(email);\n        setWishlistSummaries(summaries);\n    }\n    \n    let onClickAddWishlist = () => {\n        setShow(true);\n    }\n    \n    let createButtons = <>\n        <Button className='w-100' variant=\"outline-primary\" cypress-name='CreateNewWishlist' onClick={onClickAddWishlist}>\n            Create New...\n        </Button>\n\n        <Modal show={show} onHide={onClickCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Create New Wishlist</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <input type=\"text\" className='w-100' value={nameOfNewWishlist} onChange={handleInputChange} placeholder='Name of wishlist...' cypress-name='NameOfWishlist'></input>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onClickCancel}>\n                    Close\n          </Button>\n                <Button variant=\"primary\" cypress-name='Create' onClick={onClickCreate}>\n                    Create\n          </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n\n    let summaries =\n        <div className='wishlistSummaries'>\n            {\n                wishlistSummaries.map(s =>\n                    <Link key={s.name} to={`wishlist/${s.id}`}> <div key={s.name} className='wishlistSummaryItem'>{s.name}</div></Link>)\n            }\n            <a>\n                \n            </a>\n        </div>\n\n    return (\n        <div>\n            <h2 className='text-center'>Your Wishlists</h2>\n\n            <div>\n                {createButtons}\n            </div>\n            { summaries }\n        </div>\n    );\n}","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx",["76","77"],"import React, {useState, useEffect, ChangeEvent} from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {WishlistClient, WishlistModel} from \"../../nswag/api.generated\";\nimport {IWishlistRepository} from \"./IWishlistRepository\";\nimport \"./WishlistSummary.css\";\nimport { useGetLogin } from \"../useLogin\";\nimport {WishlistPersonRow} from \"./WishlistPersonRow\";\nimport {OtherPersonWishlistRow} from \"./OtherPersonWishlistRow\";\nimport { Button, Modal } from \"react-bootstrap\";\n\ninterface WishlistProps {\n    id: string;\n}\n\ninterface Props extends RouteComponentProps<WishlistProps> {\n    wishlistRepository : IWishlistRepository;\n}\n\n const Wishlist = (props : Props) => {\n     const [wishlist, setWishlist] = useState<WishlistModel|null>(null);\n     const [newPersonName, setNewPersonName] = useState(\"\");\n     const [newPersonEmail, setNewPersonEmail] = useState(\"\");    \n     const [addingNewPerson, setAddingNewPerson] = useState(false);\n     const login = useGetLogin(false);\n     let [addingNewPersonButtonDisabled, setAddingNewPersonButtonDisabled] = useState(false);\n    \n     useEffect(() => {\n        let id = props.match.params.id;\n        props.wishlistRepository.getWishlist(id).then(s => { \n            setWishlist(s);\n        });\n         \n     }, [wishlist?.id]);\n    \n     let createNewPersonClick = async () => {\n        var newWishlist = await new WishlistClient().addPerson(wishlist?.id, newPersonEmail, newPersonName);\n        setWishlist(newWishlist);\n        setNewPersonName(\"\");\n        setNewPersonEmail(\"\");\n        setAddingNewPerson(false);\n    }\n    \n     let addPersonButtonShouldBeDisabled = () => {\n         return wishlist?.people?.some(s => s.email === login.Email);\n     }\n     \n     let changeNewEmail = (event : ChangeEvent<HTMLInputElement>) => {\n         let npe = event.target.value;\n         setNewPersonEmail(event.target.value);\n         let f = wishlist?.people?.some(s => s.email === npe) ?? false;\n         setAddingNewPersonButtonDisabled(f);\n     }\n\n    if (wishlist) {\n        let onCLickCancelAddNewPerson = () => {\n            setAddingNewPerson(false);\n            setNewPersonName(\"\");\n        }\n        \n        let loggedInWishlist = wishlist.people?.find(s => s.email === login.Email);\n        let otherPeople = wishlist.people?.filter(s => s.email !== login.Email);\n\n        let createNewPerson = (\n            <>\n                <Button variant=\"outline-dark\" cypress-name='AddNewPerson' className='w-100' onClick={() => setAddingNewPerson(true)}>\n                Add Someone New\n                </Button>\n\n                <Modal show={addingNewPerson} onHide={onCLickCancelAddNewPerson}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add Somone New!</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <input type=\"text\" className='form-control w-100' onChange={(event) => setNewPersonName(event.target.value)}\n                            value={newPersonName} placeholder=\"What's their name?\" cypress-name='NewPersonName'></input>\n                        <input type=\"text\" className='form-control w-100 mt-2' onChange={changeNewEmail}\n                            value={newPersonEmail} placeholder=\"What's their email?\" cypress-name='NewPersonEmail'></input>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={onCLickCancelAddNewPerson}>\n                        Close\n                        </Button>\n                        <Button variant=\"primary\" disabled={addingNewPersonButtonDisabled} onClick={createNewPersonClick} cypress-name='CreateNewPerson'>\n                        Add\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        )\n        \n        let listOfOtherPeoplesIdeas = (\n            \n            <div className='wishlistSummaries' cypress-name=\"ListOfPeople\">\n                {\n                    otherPeople?.map((s) => \n                        <OtherPersonWishlistRow \n                            cypress-name='WishlistPerson'\n                            key={s.email} \n                            wishlistPerson={s} \n                            wishlistId={wishlist?.id} \n                            loggedInEmail={login.Email}\n                            setWishlist={setWishlist}></OtherPersonWishlistRow> )\n                }\n            </div>)\n        \n        return (\n            <div>\n                <h1 className='text-center' id=\"wishlistTitle\">Wishlist - {wishlist.name}</h1>\n                \n                <div>\n                    <h4 className='text-center mt-4'>What would you like?</h4>\n                    <WishlistPersonRow cypress-name='WishlistPerson' wishlistPerson={loggedInWishlist ?? {}} wishlistId={wishlist.id} setWishlist={setWishlist} loginDetails={login}></WishlistPersonRow>\n                </div>\n                <div className='mt-5'>\n                    <h4 className='text-center mt-4'>Other giftees wishlists</h4>\n                    \n                    {listOfOtherPeoplesIdeas}\n                </div>\n                <div className='mt-5'> {createNewPerson}</div>\n            </div>\n        )\n    }\n\n    return (\n        <div>Loading...</div>\n    );\n}\n\nexport default withRouter(Wishlist);","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/useLogin.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistPersonRow.tsx",["78"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/OtherPersonWishlistRow.tsx",["79"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/useWishlistClient.tsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":7,"column":17,"nodeType":"89","messageId":"90","endLine":7,"endColumn":28},{"ruleId":"87","severity":1,"message":"91","line":14,"column":12,"nodeType":"89","messageId":"90","endLine":14,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":23,"column":8,"nodeType":"94","endLine":23,"endColumn":34,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":79,"column":13,"nodeType":"98","endLine":79,"endColumn":16},{"ruleId":"92","severity":1,"message":"99","line":33,"column":9,"nodeType":"94","endLine":33,"endColumn":23,"suggestions":"100"},{"ruleId":"87","severity":1,"message":"101","line":43,"column":10,"nodeType":"89","messageId":"90","endLine":43,"endColumn":41},{"ruleId":"87","severity":1,"message":"102","line":3,"column":9,"nodeType":"89","messageId":"90","endLine":3,"endColumn":23},{"ruleId":"87","severity":1,"message":"102","line":1,"column":9,"nodeType":"89","messageId":"90","endLine":1,"endColumn":23},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'ModalDialog' is defined but never used.","Identifier","unusedVar","'creating' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadWishListSummaries' and 'login.Email'. Either include them or remove the dependency array.","ArrayExpression",["105"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.wishlistRepository'. Either include them or remove the dependency array.",["106"],"'addPersonButtonShouldBeDisabled' is assigned a value but never used.","'WishlistClient' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [loadWishListSummaries, login.Email, wishlistSummaries.length]",{"range":"111","text":"112"},"Update the dependencies array to be: [props.match.params.id, props.wishlistRepository, wishlist.id]",{"range":"113","text":"114"},[916,942],"[loadWishListSummaries, login.Email, wishlistSummaries.length]",[1290,1304],"[props.match.params.id, props.wishlistRepository, wishlist.id]"]