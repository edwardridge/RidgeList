[{"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\index.tsx":"1","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\registerServiceWorker.js":"2","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\App.tsx":"3","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\IWishlistRepository.ts":"4","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Layout.tsx":"5","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Logout.tsx":"6","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\nswag\\api.generated.ts":"7","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\Wishlist.tsx":"8","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Login.tsx":"9","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistHomepage.tsx":"10","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useLogin.ts":"11","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\NavMenu.tsx":"12","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\useWishlistClient.tsx":"13","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\OtherPersonWishlistRow.tsx":"14","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistPersonRow.tsx":"15","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useMaterialStyles.ts":"16"},{"size":555,"mtime":1610113556479,"results":"17","hashOfConfig":"18"},{"size":4121,"mtime":1610113556480,"results":"19","hashOfConfig":"18"},{"size":1332,"mtime":1612370172262,"results":"20","hashOfConfig":"18"},{"size":363,"mtime":1611609766882,"results":"21","hashOfConfig":"18"},{"size":373,"mtime":1610113556477,"results":"22","hashOfConfig":"18"},{"size":273,"mtime":1611609766869,"results":"23","hashOfConfig":"18"},{"size":22956,"mtime":1612346694869,"results":"24","hashOfConfig":"18"},{"size":7989,"mtime":1612346694866,"results":"25","hashOfConfig":"18"},{"size":2876,"mtime":1612374604588,"results":"26","hashOfConfig":"18"},{"size":4293,"mtime":1612374740987,"results":"27","hashOfConfig":"18"},{"size":1341,"mtime":1611609767004,"results":"28","hashOfConfig":"18"},{"size":1594,"mtime":1611609766871,"results":"29","hashOfConfig":"18"},{"size":138,"mtime":1611755726061,"results":"30","hashOfConfig":"18"},{"size":3001,"mtime":1612346694865,"results":"31","hashOfConfig":"18"},{"size":4202,"mtime":1612346694867,"results":"32","hashOfConfig":"18"},{"size":683,"mtime":1612373270036,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"90n24z",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\index.tsx",[],["71","72","73"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\registerServiceWorker.js",[],["74","75","76"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\App.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\IWishlistRepository.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Layout.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Logout.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\nswag\\api.generated.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\Wishlist.tsx",["77","78","79","80","81"],"import React, {useState, useEffect, ChangeEvent, useRef} from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\r\nimport {IWishlistRepository} from \"./IWishlistRepository\";\r\nimport \"./WishlistSummary.css\";\r\nimport { useGetLogin } from \"../useLogin\";\r\nimport {WishlistPersonRow} from \"./WishlistPersonRow\";\r\nimport {OtherPersonWishlistRow} from \"./OtherPersonWishlistRow\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport {useWishlistClient} from \"./useWishlistClient\";\r\nimport * as signalR from \"@microsoft/signalr\";\r\n\r\ninterface WishlistProps {\r\n    id: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<WishlistProps> {\r\n    wishlistRepository : IWishlistRepository;\r\n}\r\n\r\n const Wishlist = (props : Props) => {\r\n     const [wishlist, setWishlist] = useState<WishlistModel|null>(null);\r\n     const [newPersonName, setNewPersonName] = useState(\"\");\r\n     const [newPersonEmail, setNewPersonEmail] = useState(\"\");\r\n     const [newPersonIsGiftee, setNewPersonIsGiftee] = useState(true);    \r\n     const [addingNewPerson, setAddingNewPerson] = useState(false);\r\n     const login = useGetLogin(false);\r\n     let [addingNewPersonButtonDisabled, setAddingNewPersonButtonDisabled] = useState(false);\r\n     let wishlistClient = useWishlistClient();\r\n     let nameInputRef = useRef<HTMLInputElement>(null);\r\n    \r\n     useEffect(() => {\r\n        let id = props.match.params.id;\r\n        props.wishlistRepository.getWishlist(id).then(s => { \r\n            setWishlist(s);\r\n        });\r\n\r\n         const connection = new signalR.HubConnectionBuilder()\r\n             .withUrl(\"/wishlisthub\")\r\n             .build();\r\n\r\n         \r\n\r\n         connection.start().then(s => {\r\n             connection.invoke(\"Connect\", id).then(s => {\r\n                 connection.on(\"UpdateWishlist\", (wishlistModel : WishlistModel) => {\r\n                     setWishlist(wishlistModel);\r\n                 });\r\n             });\r\n         }).catch(err => document.write(err));\r\n         \r\n     }, [wishlist?.id]);\r\n    \r\n     let createNewPersonClick = async () => {\r\n        var newWishlist = await wishlistClient.addPerson(wishlist?.id, newPersonEmail, newPersonName, newPersonIsGiftee);\r\n        setWishlist(newWishlist);\r\n        setNewPersonName(\"\");\r\n        setNewPersonEmail(\"\");\r\n        setAddingNewPerson(false);\r\n    }\r\n    \r\n     let addPersonButtonShouldBeDisabled = () => {\r\n         return wishlist?.people?.some(s => s.email === login.Email);\r\n     }\r\n     \r\n     let changeNewEmail = (event : ChangeEvent<HTMLInputElement>) => {\r\n         let npe = event.target.value;\r\n         setNewPersonEmail(event.target.value);\r\n         let f = wishlist?.people?.some(s => s.email === npe) ?? false;\r\n         setAddingNewPersonButtonDisabled(f);\r\n     }\r\n     \r\n     let clickAddNewPerson = () => {\r\n         setAddingNewPerson(true);\r\n         setTimeout(() => nameInputRef?.current?.focus(), 0);\r\n     }\r\n\r\n    if (wishlist) {\r\n        let onCLickCancelAddNewPerson = () => {\r\n            setAddingNewPerson(false);\r\n            setNewPersonName(\"\");\r\n        }\r\n        \r\n        let loggedInWishlist = wishlist.people?.find(s => s.email === login.Email) ?? {} as WishlistPersonModel;\r\n        let otherGiftees = wishlist.people?.filter(s => s.email !== login.Email && s.giftee === true);\r\n        let otherNonGiftees = wishlist.people?.filter(s => s.email !== login.Email && s.giftee === false);\r\n        \r\n        let createNewPerson = (\r\n            <>\r\n                <Button variant=\"outline-dark\" size='lg' cypress-name='AddNewPerson' className='w-100' onClick={clickAddNewPerson}>\r\n                Add Someone New\r\n                </Button>\r\n\r\n                <Modal show={addingNewPerson} onHide={onCLickCancelAddNewPerson}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Somone New!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className='input-group-lg'>\r\n                            <input type=\"text\" ref={nameInputRef} className='form-control w-100' onChange={(event) => setNewPersonName(event.target.value)}\r\n                                value={newPersonName} placeholder=\"What's their name?\" cypress-name='NewPersonName'></input>\r\n                            <input type=\"text\" className='form-control w-100 mt-2' onChange={changeNewEmail}\r\n                                value={newPersonEmail} placeholder=\"What's their email?\" cypress-name='NewPersonEmail'></input>\r\n                        </div>\r\n                        <div className=\"form-check mt-3\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" checked={newPersonIsGiftee} id=\"areTheyGiftee\" onChange={(e) => {setNewPersonIsGiftee(e.target.checked)}}/>\r\n                                <label className=\"form-check-label\" htmlFor=\"areTheyGiftee\">\r\n                                    Are they receiving gifts?   \r\n                                </label>\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" block={true} size='lg' disabled={addingNewPersonButtonDisabled} onClick={createNewPersonClick} cypress-name='CreateNewPerson'>\r\n                        Add\r\n                        </Button>\r\n                        <Button variant=\"secondary\" block={true} size='lg' onClick={onCLickCancelAddNewPerson}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        )\r\n        \r\n        let listOfOtherPeoplesIdeas = (\r\n            <div className='mt-5'>\r\n                <hr className='bigLine'></hr>\r\n                <h3 className='text-center mt-5'>Other people's gift ideas</h3>\r\n                <div className='wishlistSummaries' cypress-name=\"ListOfPeople\">\r\n                    {\r\n                        otherGiftees?.map((s) => \r\n                            <OtherPersonWishlistRow \r\n                                cypress-name='WishlistPerson'\r\n                                key={s.email} \r\n                                wishlistPerson={s} \r\n                                wishlistId={wishlist?.id} \r\n                                loggedInEmail={login.Email}\r\n                                setWishlist={setWishlist}></OtherPersonWishlistRow> )\r\n                    }\r\n                </div>\r\n            </div>)\r\n        \r\n        let otherNonGifteeSection = <div className='mt-5'>\r\n            <hr className='bigLine'></hr>\r\n            <h3 className='text-center mt-5'>Gift givers</h3>\r\n            <table className='table'>\r\n                {otherNonGiftees?.map(s => `${s.name} (${s.email})`).join(', ')}\r\n            </table>\r\n        </div>\r\n        \r\n        let addNewItems = <>\r\n            <h1 className='text-center' id=\"wishlistTitle\">Wishlist - {wishlist.name}</h1>\r\n\r\n            <div>\r\n                <h3 className='text-center mt-4'>What would you like?</h3>\r\n                <WishlistPersonRow cypress-name='WishlistPerson' wishlistPerson={loggedInWishlist} wishlistId={wishlist.id} setWishlist={setWishlist} loginDetails={login}></WishlistPersonRow>\r\n            </div>\r\n        </>\r\n        \r\n        return (\r\n            <div>\r\n                {loggedInWishlist.giftee ? addNewItems : <></>}\r\n                \r\n                <div>\r\n                    {otherGiftees?.length ?? 0 > 0 ? listOfOtherPeoplesIdeas : <></>}\r\n                </div>\r\n                <div>\r\n                    {otherNonGiftees?.length ?? 0 > 0 ? otherNonGifteeSection : <></>}\r\n                </div>\r\n                \r\n                <div className='mt-5'> {createNewPerson}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>Loading...</div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Wishlist);","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Login.tsx",["82","83"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistHomepage.tsx",["84","85","86","87","88"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useLogin.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\NavMenu.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\useWishlistClient.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\OtherPersonWishlistRow.tsx",["89"],"import {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\r\nimport React from \"react\";\r\nimport {useWishlistClient} from \"./useWishlistClient\";\r\nimport Linkify from \"react-linkify\";\r\n\r\ninterface OtherPersonWishlistRowProps{\r\n    wishlistPerson : WishlistPersonModel;\r\n    loggedInEmail : string;\r\n    wishlistId: string;\r\n    setWishlist: (wishlist : WishlistModel) => void;\r\n}\r\n\r\nexport const OtherPersonWishlistRow = (props : OtherPersonWishlistRowProps) => {\r\n    let wishlistClient = useWishlistClient();\r\n    \r\n    let claimPresentClick = async (presentId : string) => {\r\n        let wishlist = await wishlistClient\r\n            .claimGift(props.wishlistId, props.loggedInEmail, presentId);\r\n        props.setWishlist(wishlist);\r\n    }\r\n\r\n    let unclaimPresentClick = async (presentId : string) => {\r\n        let wishlist = await wishlistClient\r\n            .unclaimGift(props.wishlistId, presentId);\r\n        props.setWishlist(wishlist);\r\n    }\r\n    let getPresentIdeas = () => {\r\n        if(props.wishlistPerson.presentIdeas?.length === 0){\r\n            return <div className='lightGrey text-center'>They haven't added any gift ideas yet!</div>\r\n        }\r\n        return props.wishlistPerson.presentIdeas?.map(s => {\r\n            let claimed = s.claimerEmail !== null && s.claimerEmail !== '';\r\n            let claimedByYou = s.claimerEmail === props.loggedInEmail;\r\n            let unclaim = claimedByYou ? <button className='btn btn-lg btn-outline-danger w-100'\r\n                                                 onClick={() => unclaimPresentClick(s.id)}>Unclaim</button> : null;\r\n            let claimerText = claimed ? `- claimed by ${claimedByYou ? \"you\" : s.claimerName}` : '';\r\n            let claimSection = s.claimerName ?\r\n                <>{unclaim}</> :\r\n                <button className='btn btn-lg btn-outline-success w-100'\r\n                        onClick={() => claimPresentClick(s.id)}>Claim</button>;\r\n\r\n            let classes = `mt-1 ml-0 mr-0 row ${claimed ? 'claimed' : ''}`;\r\n            return (\r\n                <tr key={s.id} className={classes}>\r\n                    <td className='col-8 col-md-10' cypress-name={`${s.id}-description`}>\r\n                        <Linkify>{s.description} {claimerText}</Linkify></td>\r\n                    <td className='col-4 col-md-2 text-right' cypress-name={`${s.id}-buttons`}>{claimSection}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <div className='wishlistSummaryItem mb-3' key={`${props.wishlistPerson.email}`}>\r\n            <div>\r\n                <span className='d-inline-block col-12 text-center'>\r\n                    <h4 className='d-inline-block'>{props.wishlistPerson.name}</h4>\r\n                    <span className='lightGrey'> ({props.wishlistPerson.email})</span>\r\n                </span>\r\n            </div>\r\n            <table className='table'>\r\n                {getPresentIdeas()}\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistPersonRow.tsx",["90"],"import React, {useRef, useState} from \"react\";\r\nimport { LoginDetails } from \"../useLogin\";\r\nimport {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport {useWishlistClient} from \"./useWishlistClient\";\r\nimport Linkify from \"react-linkify\";\r\n\r\ninterface WishlistPersonRowProps{\r\n    loginDetails : LoginDetails;\r\n    wishlistPerson : WishlistPersonModel;\r\n    wishlistId: string;\r\n    setWishlist: (wishlist : WishlistModel) => void;\r\n}\r\n\r\nexport const WishlistPersonRow = (props : WishlistPersonRowProps) => {\r\n    const [newItemDescription, setNewItemDescription] = useState(\"\");\r\n    const [showAddItem, setShowAddItem] = useState(false);\r\n    const wishlistClient = useWishlistClient();\r\n    const inputRef = useRef<HTMLTextAreaElement>(null);\r\n    \r\n    let clickAddItem = async (closeAddItem: boolean) => {\r\n        let wishlist = await wishlistClient.addGiftIdea(props.wishlistId, props.loginDetails.Email, newItemDescription);\r\n        props.setWishlist(wishlist);\r\n        setNewItemDescription(\"\");\r\n        if (closeAddItem){\r\n            setShowAddItem(false);\r\n        }\r\n        else{\r\n            setTimeout(() => inputRef?.current?.focus(),0);\r\n        }\r\n            \r\n    }\r\n\r\n    let removePresentIdea = async (id: string) => {\r\n        let wishlist = await wishlistClient.removeGiftIdea(props.wishlistId, props.loginDetails.Email, id);\r\n        props.setWishlist(wishlist);\r\n    }\r\n\r\n    let onClickCancelAddItem = () => {\r\n        setShowAddItem(false);\r\n    }\r\n    \r\n    let clickNewItemButton = () => {\r\n        setShowAddItem(true);\r\n        setTimeout(() => inputRef?.current?.focus(),0);\r\n    }\r\n\r\n    let addItems = (\r\n        <div className='loggedInPersonGifts'>\r\n            \r\n            <table className='table '>\r\n                <tbody>\r\n                {props.wishlistPerson.presentIdeas?.map(s => {\r\n                    return (\r\n                        <tr className='row' key={s.id}>\r\n                            <td className='col-8 col-md-10'><Linkify>{s.description}</Linkify></td>\r\n                            <td className='col-4 col-md-2'>\r\n                                <button className='btn btn-outline-danger w-100 btn-lg' onClick={() => removePresentIdea(s.id)}>Remove</button>\r\n                            </td>\r\n                        </tr>)\r\n                })}\r\n                </tbody>\r\n            </table>\r\n            <div className='mt-2'>\r\n                \r\n                <Button variant=\"outline-primary\" size='lg' cypress-name='AddNewItemButton' className='w-100' onClick={clickNewItemButton}>\r\n                    Add New Gift Idea\r\n                </Button>\r\n\r\n                <Modal show={showAddItem} onHide={onClickCancelAddItem}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New Gift Idea</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <textarea ref={inputRef} rows={8} className='form-control w-100' value={newItemDescription} onChange={(event) => { setNewItemDescription(event.target.value) }} placeholder='What would you like? You can also include links!' cypress-name='AddItem'></textarea>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button size='lg' block={true} variant=\"primary\" onClick={() => { clickAddItem(false) }}>\r\n                            Save And Add More\r\n                        </Button>\r\n                        <Button size='lg' block={true} variant=\"primary\" cypress-name='SaveItemButton' onClick={() => { clickAddItem(true) }}>\r\n                            Save And Close\r\n                        </Button>\r\n                        <Button size='lg' block={true} variant=\"secondary\" onClick={onClickCancelAddItem}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                \r\n            </div>\r\n    </div>\r\n    );\r\n   \r\n    return (\r\n        \r\n        <div className='mt-4' key={`${props.wishlistPerson.email}`}>\r\n            {addItems}\r\n        </div>\r\n    )\r\n}","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useMaterialStyles.ts",["91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":9,"nodeType":"101","messageId":"102","endLine":3,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":52,"column":9,"nodeType":"105","endLine":52,"endColumn":23,"suggestions":"106"},{"ruleId":"99","severity":1,"message":"107","line":62,"column":10,"nodeType":"101","messageId":"102","endLine":62,"endColumn":41},{"ruleId":"108","severity":1,"message":"109","line":164,"column":46,"nodeType":"110","messageId":"111","endLine":164,"endColumn":51},{"ruleId":"108","severity":1,"message":"109","line":167,"column":49,"nodeType":"110","messageId":"111","endLine":167,"endColumn":54},{"ruleId":"99","severity":1,"message":"112","line":7,"column":8,"nodeType":"101","messageId":"102","endLine":7,"endColumn":19},{"ruleId":"99","severity":1,"message":"113","line":10,"column":8,"nodeType":"101","messageId":"102","endLine":10,"endColumn":17},{"ruleId":"99","severity":1,"message":"114","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":14},{"ruleId":"99","severity":1,"message":"115","line":8,"column":79,"nodeType":"101","messageId":"102","endLine":8,"endColumn":86},{"ruleId":"99","severity":1,"message":"116","line":8,"column":142,"nodeType":"101","messageId":"102","endLine":8,"endColumn":147},{"ruleId":"99","severity":1,"message":"117","line":15,"column":12,"nodeType":"101","messageId":"102","endLine":15,"endColumn":20},{"ruleId":"103","severity":1,"message":"118","line":27,"column":8,"nodeType":"105","endLine":27,"endColumn":34,"suggestions":"119"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":9,"nodeType":"101","messageId":"102","endLine":1,"endColumn":23},{"ruleId":"99","severity":1,"message":"100","line":3,"column":9,"nodeType":"101","messageId":"102","endLine":3,"endColumn":23},{"ruleId":"120","severity":1,"message":"121","line":1,"column":1,"nodeType":"122","messageId":"123","fix":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'WishlistClient' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.wishlistRepository'. Either include them or remove the dependency array.","ArrayExpression",["127"],"'addPersonButtonShouldBeDisabled' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'CssBaseline' is defined but never used.","'Container' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'Paper' is defined but never used.","'creating' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadWishListSummaries' and 'login.Email'. Either include them or remove the dependency array.",["128"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"129","text":"130"},"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},[-1,0],"","Update the dependencies array to be: [props.match.params.id, props.wishlistRepository, wishlist.id]",{"range":"135","text":"136"},"Update the dependencies array to be: [loadWishListSummaries, login.Email, wishlistSummaries.length]",{"range":"137","text":"138"},[2101,2115],"[props.match.params.id, props.wishlistRepository, wishlist.id]",[1304,1330],"[loadWishListSummaries, login.Email, wishlistSummaries.length]"]