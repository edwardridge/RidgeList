[{"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js":"1","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx":"2","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx":"3","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx":"4","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx":"5","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx":"6","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx":"7","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx":"8","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx":"9","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts":"10","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx":"11","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts":"12"},{"size":4013,"mtime":1609345184850,"results":"13","hashOfConfig":"14"},{"size":1180,"mtime":1610300293262,"results":"15","hashOfConfig":"14"},{"size":1720,"mtime":1609594894039,"results":"16","hashOfConfig":"14"},{"size":537,"mtime":1609609774645,"results":"17","hashOfConfig":"14"},{"size":791,"mtime":1609609356741,"results":"18","hashOfConfig":"14"},{"size":355,"mtime":1609345184842,"results":"19","hashOfConfig":"14"},{"size":1565,"mtime":1609610983477,"results":"20","hashOfConfig":"14"},{"size":1383,"mtime":1609633918480,"results":"21","hashOfConfig":"14"},{"size":2157,"mtime":1610303307251,"results":"22","hashOfConfig":"14"},{"size":13415,"mtime":1610304663467,"results":"23","hashOfConfig":"14"},{"size":2225,"mtime":1610306224323,"results":"24","hashOfConfig":"14"},{"size":352,"mtime":1610299894310,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"16c9n8r",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js",[],["56","57","58"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx",[],["59","60","61"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx",["62"],"import React, { Component } from 'react';\nimport { WeatherForecastClient, WeatherForecast } from '../nswag/api.generated';\n\nexport class FetchData extends React.Component<any, any> {\n  static displayName = FetchData.name;\n\n  constructor(props : any) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts : WeatherForecast[]) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date.toString()}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const data = await new WeatherForecastClient().get();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx",[],["63","64","65"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx",["66","67","68"],"import React, {ChangeEvent, useState, useEffect} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {WishlistClient, WishlistModel, WishlistSummaryModel} from \"../../nswag/api.generated\";\nimport { Link, Redirect } from \"react-router-dom\";\n\ninterface WishlishHomepageProps{\n    wishlistClient: WishlistClient;\n}\n\nexport const WishlistHomepage: React.FC<WishlishHomepageProps> = (props) => {\n    const [creating, setCreating] = useState(false);\n    const [nameOfNewWishlist, setNameOfNewWishlist] = useState(\"\");\n    const [wishlistSummaries, setWishlistSummaries] = useState([] as WishlistSummaryModel[]);\n    const history = useHistory();\n    \n    useEffect(() => {\n        loadWishListSummaries();\n    }, [wishlistSummaries.length]);\n\n    let onClickNewWishlist = () => {\n        setCreating(true);\n    }\n\n    let onClickCreate = async () => {\n        let newWishlist = await props.wishlistClient.create(nameOfNewWishlist);\n        setCreating(false);\n        history.push(\"/wishlist/\" + newWishlist.id);\n    }\n\n    let handleInputChange = (event : ChangeEvent<HTMLInputElement>) => {\n        setNameOfNewWishlist(event.target.value);\n    }\n    \n    let loadWishListSummaries = async () => {\n        var summaries = await props.wishlistClient.getSummaries();\n        setWishlistSummaries(summaries);\n    }\n    \n    let createButtons;\n    if (!creating) {\n        createButtons = <button onClick={onClickNewWishlist} cypress-name='CreateNewWishlist'>Create New Wishlist</button>\n    }\n    else {\n        createButtons = <div>\n            <input type=\"text\" value={nameOfNewWishlist} onChange={handleInputChange} placeholder='Name of wishlist...' cypress-name='NameOfWishlist'></input> \n            <button onClick={onClickCreate} cypress-name='Create'>Create</button></div>\n    }\n\n    let summaries =\n        <ul>\n            {\n                wishlistSummaries.map(s =>\n                    <li key={s.name}>\n                        <Link to={`wishlist/${s.id}`}> {s.name}</Link>\n                    </li>)\n            }\n        </ul>\n\n    return (\n        <div>\n            { createButtons}\n            { summaries}\n        </div>\n    );\n}","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx",["69"],"import React, { useState, useEffect } from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {WishlistClient, WishlistModel} from \"../../nswag/api.generated\";\nimport {IWishlistRepository} from \"./IWishlistRepository\";\n\ninterface WishlistProps {\n    id: string;\n}\n\ninterface Props extends RouteComponentProps<WishlistProps> {\n\n    wishlistRepository : IWishlistRepository;\n}\n\n const Wishlist : React.FC<Props> = (props) => {\n    const [wishlist, setWishlist] = useState<WishlistModel|null>(null);\n    const [newPersonName, setNewPersonName] = useState(\"\");\n    const [creatingNewPerson, setCreatingNewPerson] = useState(false);\n    \n    useEffect(() => {\n        let id = props.match.params.id;\n        props.wishlistRepository.getWishlist(id).then(s => setWishlist(s));\n    }, [wishlist?.id]);\n    \n    let startAddNewPerson = () => {\n        setCreatingNewPerson(true);\n    }\n\n     let createNewPersonClick = async () => {\n        var newWishlist = await new WishlistClient().addPerson(wishlist?.id, newPersonName);\n        setWishlist(newWishlist);\n        setCreatingNewPerson(false);\n    }\n\n    if (wishlist) {\n        let listOfPeople = <ul cypress-name=\"ListOfPeople\"> {wishlist.people?.map((s,i) => <li key={`${s}${i}`}>{s}</li>)}</ul>\n        \n        let createNewPerson;\n        if(!creatingNewPerson){\n            createNewPerson = <button onClick={startAddNewPerson} cypress-name='AddPerson'>Add Person</button>\n        }else{\n            createNewPerson = (\n                <div>\n                <input type=\"text\" \n                       cypress-name=\"NewPersonName\" \n                       onChange={(event) => setNewPersonName(event.target.value)}\n                        placeholder=\"Enter the new email address\"></input>\n                <button cypress-name=\"CreateNewPerson\" onClick={createNewPersonClick}>Create</button>\n                </div>\n            )\n        }\n        \n        return (\n            <div>\n                <h1 id=\"wishlistTitle\">Wishlist - {wishlist.name}</h1>\n                {createNewPerson}\n                {listOfPeople}\n            </div>\n        )\n    }\n\n    return (\n        <div>Loading...</div>\n    );\n}\n\nexport default withRouter(Wishlist);","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"70","replacedBy":"81"},{"ruleId":"72","replacedBy":"82"},{"ruleId":"74","replacedBy":"83"},{"ruleId":"77","severity":1,"message":"84","line":3,"column":25,"nodeType":"79","messageId":"80","endLine":3,"endColumn":38},{"ruleId":"77","severity":1,"message":"85","line":4,"column":16,"nodeType":"79","messageId":"80","endLine":4,"endColumn":24},{"ruleId":"86","severity":1,"message":"87","line":18,"column":8,"nodeType":"88","endLine":18,"endColumn":34,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":23,"column":8,"nodeType":"88","endLine":23,"endColumn":22,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar",["92"],["93"],[],"'WishlistModel' is defined but never used.","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadWishListSummaries'. Either include it or remove the dependency array.","ArrayExpression",["94"],"React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.wishlistRepository'. Either include them or remove the dependency array.",["95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [loadWishListSummaries, wishlistSummaries.length]",{"range":"100","text":"101"},"Update the dependencies array to be: [props.match.params.id, props.wishlistRepository, wishlist.id]",{"range":"102","text":"103"},[723,749],"[loadWishListSummaries, wishlistSummaries.length]",[809,823],"[props.match.params.id, props.wishlistRepository, wishlist.id]"]