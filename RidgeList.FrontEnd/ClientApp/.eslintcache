[{"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js":"1","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx":"2","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx":"3","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx":"4","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx":"5","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx":"6","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx":"7","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx":"8","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx":"9","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts":"10","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx":"11","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts":"12"},{"size":4013,"mtime":1609345184850,"results":"13","hashOfConfig":"14"},{"size":1180,"mtime":1610300293262,"results":"15","hashOfConfig":"14"},{"size":1720,"mtime":1609594894039,"results":"16","hashOfConfig":"14"},{"size":537,"mtime":1609609774645,"results":"17","hashOfConfig":"14"},{"size":791,"mtime":1609609356741,"results":"18","hashOfConfig":"14"},{"size":355,"mtime":1609345184842,"results":"19","hashOfConfig":"14"},{"size":1565,"mtime":1609610983477,"results":"20","hashOfConfig":"14"},{"size":1383,"mtime":1609633918480,"results":"21","hashOfConfig":"14"},{"size":2638,"mtime":1610322268488,"results":"22","hashOfConfig":"14"},{"size":13415,"mtime":1610304663467,"results":"23","hashOfConfig":"14"},{"size":2070,"mtime":1610309161396,"results":"24","hashOfConfig":"14"},{"size":352,"mtime":1610299894310,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"16c9n8r",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js",[],["54","55","56"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx",[],["57","58","59"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/HelloWorld.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Counter.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/FetchData.tsx",["60"],"import React, { Component } from 'react';\nimport { WeatherForecastClient, WeatherForecast } from '../nswag/api.generated';\n\nexport class FetchData extends React.Component<any, any> {\n  static displayName = FetchData.name;\n\n  constructor(props : any) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts : WeatherForecast[]) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date.toString()}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const data = await new WeatherForecastClient().get();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx",["61","62","63","64"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx",["65"],"import React, { useState, useEffect } from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {WishlistClient, WishlistModel} from \"../../nswag/api.generated\";\nimport {IWishlistRepository} from \"./IWishlistRepository\";\n\ninterface WishlistProps {\n    id: string;\n}\n\ninterface Props extends RouteComponentProps<WishlistProps> {\n\n    wishlistRepository : IWishlistRepository;\n}\n\n const Wishlist : React.FC<Props> = (props) => {\n    const [wishlist, setWishlist] = useState<WishlistModel|null>(null);\n    const [newPersonName, setNewPersonName] = useState(\"\");\n    \n    useEffect(() => {\n        let id = props.match.params.id;\n        props.wishlistRepository.getWishlist(id).then(s => setWishlist(s));\n    }, [wishlist?.id]);\n    \n     let createNewPersonClick = async () => {\n        var newWishlist = await new WishlistClient().addPerson(wishlist?.id, newPersonName);\n        setWishlist(newWishlist);\n        setNewPersonName(\"\");\n    }\n    \n    let createButonIsDisabled = () => {\n        return (wishlist?.people?.indexOf(newPersonName) ?? 0) > -1;\n    }\n\n    if (wishlist) {\n        let listOfPeople = <ul cypress-name=\"ListOfPeople\"> {wishlist.people?.map((s,i) => <li key={`${s}${i}`}>{s}</li>)}</ul>\n        \n        let createNewPerson = (\n                <div>\n                <input type=\"text\" \n                       cypress-name=\"NewPersonName\" \n                       onChange={(event) => setNewPersonName(event.target.value)}\n                       value={newPersonName}\n                       placeholder=\"Enter the new email address\"></input>\n                <button cypress-name=\"CreateNewPerson\" onClick={createNewPersonClick} disabled={createButonIsDisabled()}>Create</button>\n                </div>\n            )\n        \n        return (\n            <div>\n                <h1 id=\"wishlistTitle\">Wishlist - {wishlist.name}</h1>\n                {createNewPerson}\n                {listOfPeople}\n            </div>\n        )\n    }\n\n    return (\n        <div>Loading...</div>\n    );\n}\n\nexport default withRouter(Wishlist);","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"77","line":3,"column":25,"nodeType":"75","messageId":"76","endLine":3,"endColumn":38},{"ruleId":"73","severity":1,"message":"78","line":4,"column":16,"nodeType":"75","messageId":"76","endLine":4,"endColumn":24},{"ruleId":"79","severity":1,"message":"80","line":18,"column":8,"nodeType":"81","endLine":18,"endColumn":34,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":62,"column":13,"nodeType":"85","endLine":62,"endColumn":25},{"ruleId":"79","severity":1,"message":"86","line":22,"column":8,"nodeType":"81","endLine":22,"endColumn":22,"suggestions":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'WishlistModel' is defined but never used.","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadWishListSummaries'. Either include it or remove the dependency array.","ArrayExpression",["90"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.wishlistRepository'. Either include them or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [loadWishListSummaries, wishlistSummaries.length]",{"range":"96","text":"97"},"Update the dependencies array to be: [props.match.params.id, props.wishlistRepository, wishlist.id]",{"range":"98","text":"99"},[755,781],"[loadWishListSummaries, wishlistSummaries.length]",[738,752],"[props.match.params.id, props.wishlistRepository, wishlist.id]"]