[{"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\index.tsx":"1","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\registerServiceWorker.js":"2","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\App.tsx":"3","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\IWishlistRepository.ts":"4","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Layout.tsx":"5","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Logout.tsx":"6","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\nswag\\api.generated.ts":"7","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\Wishlist.tsx":"8","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Login.tsx":"9","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistHomepage.tsx":"10","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useLogin.ts":"11","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\NavMenu.tsx":"12","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\useWishlistClient.tsx":"13","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\OtherPersonWishlistRow.tsx":"14","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistPersonRow.tsx":"15","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useMaterialStyles.ts":"16"},{"size":555,"mtime":1610113556479,"results":"17","hashOfConfig":"18"},{"size":4121,"mtime":1610113556480,"results":"19","hashOfConfig":"18"},{"size":1332,"mtime":1612370172262,"results":"20","hashOfConfig":"18"},{"size":363,"mtime":1611609766882,"results":"21","hashOfConfig":"18"},{"size":373,"mtime":1610113556477,"results":"22","hashOfConfig":"18"},{"size":273,"mtime":1611609766869,"results":"23","hashOfConfig":"18"},{"size":22956,"mtime":1612346694869,"results":"24","hashOfConfig":"18"},{"size":8598,"mtime":1612376740660,"results":"25","hashOfConfig":"18"},{"size":2876,"mtime":1612374604588,"results":"26","hashOfConfig":"18"},{"size":4293,"mtime":1612375202466,"results":"27","hashOfConfig":"18"},{"size":1341,"mtime":1611609767004,"results":"28","hashOfConfig":"18"},{"size":1594,"mtime":1611609766871,"results":"29","hashOfConfig":"18"},{"size":138,"mtime":1611755726061,"results":"30","hashOfConfig":"18"},{"size":3001,"mtime":1612346694865,"results":"31","hashOfConfig":"18"},{"size":3931,"mtime":1612376700740,"results":"32","hashOfConfig":"18"},{"size":683,"mtime":1612373270036,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"90n24z",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"71","usedDeprecatedRules":"36"},"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\index.tsx",[],["72","73","74"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\registerServiceWorker.js",[],["75","76","77"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\App.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\IWishlistRepository.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Layout.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Logout.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\nswag\\api.generated.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\Wishlist.tsx",["78","79","80","81","82"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Login\\Login.tsx",["83","84"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSetLogin, useGetLogin } from \"../useLogin\";\r\nimport { useMaterialStyles } from \"../useMaterialStyles\";\r\nimport \"./Login.css\"\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport const Login : React.FC<any> = (props) => {\r\n    const [loginEmail, setLoginEmail] = useState(\"\");    \r\n    const [loginName, setLoginName] = useState(\"\");\r\n    const history = useHistory();\r\n    const getLogin = useGetLogin(true);\r\n    const setLogin = useSetLogin();\r\n    const classes = useMaterialStyles();\r\n    \r\n    useEffect(() => {\r\n       if(getLogin.IsLoggedIn) {\r\n            history.push('/wishlists');\r\n        }\r\n    });\r\n    \r\n    const loginClicked = () => {\r\n        setLogin(loginEmail, loginName);\r\n        history.push('/wishlists');\r\n    }\r\n     \r\n    return (\r\n        <>\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"primary\">\r\n                    Welcome to RidgeList!\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"NameLogin\"\r\n                        label=\"Email Address\"\r\n                        name=\"NameLogin\"\r\n                        onChange={(e) => setLoginName(e.target.value)}\r\n                        cypress-name=\"NameLogin\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"EmailLogin\"\r\n                        label=\"Name\"\r\n                        type=\"text\"\r\n                        id=\"EmailLogin\"\r\n                        cypress-name=\"EmailLogin\"\r\n                        autoComplete=\"email\"\r\n                        onChange={(e) => setLoginEmail(e.target.value)}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        cypress-name='LoginButton'\r\n                        onClick={loginClicked}\r\n                    >\r\n                        Enter\r\n          </Button>\r\n                </form>\r\n            </div>\r\n        </>)\r\n}","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistHomepage.tsx",["85","86","87","88","89"],"import React, {ChangeEvent, useState, useEffect, useRef} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {WishlistClient, WishlistSummaryModel} from \"../../nswag/api.generated\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './WishlistSummary.css';\r\nimport { useGetLogin } from \"../useLogin\";\r\nimport { useMaterialStyles } from \"../useMaterialStyles\";\r\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, Divider, FormControlLabel, Grid, List, ListItem, ListItemText, Paper, TextField, Typography } from \"@material-ui/core\";\r\n\r\ninterface WishlishHomepageProps{\r\n    wishlistClient: WishlistClient;\r\n}\r\n\r\nexport const WishlistHomepage = (props : WishlishHomepageProps) => {\r\n    const [creating, setCreating] = useState(false);\r\n    const [nameOfNewWishlist, setNameOfNewWishlist] = useState(\"\");\r\n    const [creatorIsGiftee, setCreatorIsGiftee] = useState(true);\r\n    const [wishlistSummaries, setWishlistSummaries] = useState([] as WishlistSummaryModel[]);\r\n    const history = useHistory();\r\n    const login = useGetLogin(false);\r\n    const [show, setShow] = useState(false);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const classes = useMaterialStyles();\r\n\r\n    useEffect(() => {\r\n        loadWishListSummaries(login.Email);\r\n    }, [wishlistSummaries.length]);\r\n\r\n    let onClickCancel = () => {\r\n        setNameOfNewWishlist(\"\");\r\n        setShow(false);\r\n    }\r\n    \r\n    let onClickCreate = async () => {\r\n        let newWishlist = await props.wishlistClient.create(nameOfNewWishlist, login.Email, login.Name, creatorIsGiftee);\r\n        setCreating(false);\r\n        history.push(\"/wishlist/\" + newWishlist.id);\r\n        setShow(false);\r\n    }\r\n\r\n    let handleInputChange = (event : ChangeEvent<HTMLInputElement>) => {\r\n        setNameOfNewWishlist(event.target.value);\r\n    }\r\n    \r\n    let loadWishListSummaries = async (email : string) => {\r\n        var summaries = await props.wishlistClient.getSummaries(email);\r\n        setWishlistSummaries(summaries);\r\n    }\r\n    \r\n    let onClickAddWishlist = () => {\r\n        setShow(true);\r\n        setTimeout(() => {inputRef?.current?.focus();},0);\r\n    }\r\n    \r\n    let createButtons = <>\r\n        <Button fullWidth cypress-name='CreateNewWishlist' onClick={onClickAddWishlist}>\r\n            Create New...\r\n        </Button>\r\n\r\n        <Dialog open={show} onClose={onClickCancel}>\r\n\r\n            <DialogTitle>Create New Wishlist</DialogTitle>\r\n            <DialogContent>\r\n                <div className='input-group input-group-lg'>\r\n                    <TextField autoFocus margin=\"dense\" value={nameOfNewWishlist} onChange={handleInputChange} label='Name of wishlist...' cypress-name='NameOfWishlist' fullWidth></TextField>\r\n                    <FormControlLabel control={<Checkbox checked={creatorIsGiftee} onChange={(e) => { setCreatorIsGiftee(e.target.checked) }} name=\"areTheyGiftee\" color=\"primary\" />} label=\"Are you receiving gifts?\" />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button cypress-name='Create' onClick={onClickCreate}>\r\n                    Create\r\n                </Button>\r\n                <Button onClick={onClickCancel}>\r\n                    Close\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>\r\n\r\n    let summaries =\r\n        <div className={classes.root}>\r\n            <List component=\"nav\">\r\n                {\r\n                    wishlistSummaries.map(s =>\r\n                        <ListItem divider key={s.name} onClick={() => history.push(`/wishlist/${s.id}`)} button><ListItemText primary={s.name} /></ListItem>)\r\n                }\r\n            </List>\r\n        </div>\r\n\r\n    return (\r\n        <div className={classes.paper}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <Typography component=\"h1\" variant=\"h5\" color=\"primary\" align=\"center\">\r\n                        Your Wishlists\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    { summaries }\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {createButtons}\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useLogin.ts",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\NavMenu.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\useWishlistClient.tsx",[],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\OtherPersonWishlistRow.tsx",["90"],"import {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\r\nimport React from \"react\";\r\nimport {useWishlistClient} from \"./useWishlistClient\";\r\nimport Linkify from \"react-linkify\";\r\n\r\ninterface OtherPersonWishlistRowProps{\r\n    wishlistPerson : WishlistPersonModel;\r\n    loggedInEmail : string;\r\n    wishlistId: string;\r\n    setWishlist: (wishlist : WishlistModel) => void;\r\n}\r\n\r\nexport const OtherPersonWishlistRow = (props : OtherPersonWishlistRowProps) => {\r\n    let wishlistClient = useWishlistClient();\r\n    \r\n    let claimPresentClick = async (presentId : string) => {\r\n        let wishlist = await wishlistClient\r\n            .claimGift(props.wishlistId, props.loggedInEmail, presentId);\r\n        props.setWishlist(wishlist);\r\n    }\r\n\r\n    let unclaimPresentClick = async (presentId : string) => {\r\n        let wishlist = await wishlistClient\r\n            .unclaimGift(props.wishlistId, presentId);\r\n        props.setWishlist(wishlist);\r\n    }\r\n    let getPresentIdeas = () => {\r\n        if(props.wishlistPerson.presentIdeas?.length === 0){\r\n            return <div className='lightGrey text-center'>They haven't added any gift ideas yet!</div>\r\n        }\r\n        return props.wishlistPerson.presentIdeas?.map(s => {\r\n            let claimed = s.claimerEmail !== null && s.claimerEmail !== '';\r\n            let claimedByYou = s.claimerEmail === props.loggedInEmail;\r\n            let unclaim = claimedByYou ? <button className='btn btn-lg btn-outline-danger w-100'\r\n                                                 onClick={() => unclaimPresentClick(s.id)}>Unclaim</button> : null;\r\n            let claimerText = claimed ? `- claimed by ${claimedByYou ? \"you\" : s.claimerName}` : '';\r\n            let claimSection = s.claimerName ?\r\n                <>{unclaim}</> :\r\n                <button className='btn btn-lg btn-outline-success w-100'\r\n                        onClick={() => claimPresentClick(s.id)}>Claim</button>;\r\n\r\n            let classes = `mt-1 ml-0 mr-0 row ${claimed ? 'claimed' : ''}`;\r\n            return (\r\n                <tr key={s.id} className={classes}>\r\n                    <td className='col-8 col-md-10' cypress-name={`${s.id}-description`}>\r\n                        <Linkify>{s.description} {claimerText}</Linkify></td>\r\n                    <td className='col-4 col-md-2 text-right' cypress-name={`${s.id}-buttons`}>{claimSection}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <div className='wishlistSummaryItem mb-3' key={`${props.wishlistPerson.email}`}>\r\n            <div>\r\n                <span className='d-inline-block col-12 text-center'>\r\n                    <h4 className='d-inline-block'>{props.wishlistPerson.name}</h4>\r\n                    <span className='lightGrey'> ({props.wishlistPerson.email})</span>\r\n                </span>\r\n            </div>\r\n            <table className='table'>\r\n                {getPresentIdeas()}\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\Wishlist\\WishlistPersonRow.tsx",["91"],"C:\\Users\\edwar\\Documents\\GitHub\\RidgeList\\RidgeList.FrontEnd\\ClientApp\\src\\components\\useMaterialStyles.ts",["92"],"﻿import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useMaterialStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 720,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":3,"column":9,"nodeType":"102","messageId":"103","endLine":3,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":55,"column":9,"nodeType":"106","endLine":55,"endColumn":23,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"108","line":65,"column":10,"nodeType":"102","messageId":"103","endLine":65,"endColumn":41},{"ruleId":"109","severity":1,"message":"110","line":173,"column":50,"nodeType":"111","messageId":"112","endLine":173,"endColumn":55},{"ruleId":"109","severity":1,"message":"110","line":176,"column":53,"nodeType":"111","messageId":"112","endLine":176,"endColumn":58},{"ruleId":"100","severity":1,"message":"113","line":7,"column":8,"nodeType":"102","messageId":"103","endLine":7,"endColumn":19},{"ruleId":"100","severity":1,"message":"114","line":10,"column":8,"nodeType":"102","messageId":"103","endLine":10,"endColumn":17},{"ruleId":"100","severity":1,"message":"115","line":4,"column":10,"nodeType":"102","messageId":"103","endLine":4,"endColumn":14},{"ruleId":"100","severity":1,"message":"116","line":8,"column":79,"nodeType":"102","messageId":"103","endLine":8,"endColumn":86},{"ruleId":"100","severity":1,"message":"117","line":8,"column":142,"nodeType":"102","messageId":"103","endLine":8,"endColumn":147},{"ruleId":"100","severity":1,"message":"118","line":15,"column":12,"nodeType":"102","messageId":"103","endLine":15,"endColumn":20},{"ruleId":"104","severity":1,"message":"119","line":27,"column":8,"nodeType":"106","endLine":27,"endColumn":34,"suggestions":"120"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":9,"nodeType":"102","messageId":"103","endLine":1,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":3,"column":9,"nodeType":"102","messageId":"103","endLine":3,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":1,"column":1,"nodeType":"123","messageId":"124","fix":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'WishlistClient' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.wishlistRepository'. Either include them or remove the dependency array.","ArrayExpression",["128"],"'addPersonButtonShouldBeDisabled' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'CssBaseline' is defined but never used.","'Container' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'Paper' is defined but never used.","'creating' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadWishListSummaries' and 'login.Email'. Either include them or remove the dependency array.",["129"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"130","text":"131"},"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},[-1,0],"","Update the dependencies array to be: [props.match.params.id, props.wishlistRepository, wishlist.id]",{"range":"136","text":"137"},"Update the dependencies array to be: [loadWishListSummaries, login.Email, wishlistSummaries.length]",{"range":"138","text":"139"},[2258,2272],"[props.match.params.id, props.wishlistRepository, wishlist.id]",[1304,1330],"[loadWishListSummaries, login.Email, wishlistSummaries.length]"]