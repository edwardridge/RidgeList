[{"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx":"1","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js":"2","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx":"3","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts":"4","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts":"5","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx":"6","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx":"7","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx":"8","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Logout.tsx":"9","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Login.tsx":"10","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/useLogin.ts":"11","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx":"12","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/useWishlistClient.tsx":"13","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/OtherPersonWishlistRow.tsx":"14","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistPersonRow.tsx":"15"},{"size":537,"mtime":1609609774645,"results":"16","hashOfConfig":"17"},{"size":4013,"mtime":1609345184850,"results":"18","hashOfConfig":"17"},{"size":1063,"mtime":1610905123636,"results":"19","hashOfConfig":"17"},{"size":22430,"mtime":1612043799470,"results":"20","hashOfConfig":"17"},{"size":352,"mtime":1610299894310,"results":"21","hashOfConfig":"17"},{"size":355,"mtime":1609345184842,"results":"22","hashOfConfig":"17"},{"size":4010,"mtime":1612099677767,"results":"23","hashOfConfig":"17"},{"size":7810,"mtime":1612294103719,"results":"24","hashOfConfig":"17"},{"size":262,"mtime":1610904925612,"results":"25","hashOfConfig":"17"},{"size":1675,"mtime":1612095680849,"results":"26","hashOfConfig":"17"},{"size":1294,"mtime":1610905080553,"results":"27","hashOfConfig":"17"},{"size":1540,"mtime":1610544692379,"results":"28","hashOfConfig":"17"},{"size":134,"mtime":1611733504315,"results":"29","hashOfConfig":"17"},{"size":2936,"mtime":1612128189857,"results":"30","hashOfConfig":"17"},{"size":4103,"mtime":1612128368883,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"16c9n8r",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/index.tsx",[],["69","70","71"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/registerServiceWorker.js",[],["72","73","74"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/App.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/nswag/api.generated.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/IWishlistRepository.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Layout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistHomepage.tsx",["75","76","77","78"],"import React, {ChangeEvent, useState, useEffect, useRef} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {WishlistClient, WishlistSummaryModel} from \"../../nswag/api.generated\";\nimport { Link } from \"react-router-dom\";\nimport './WishlistSummary.css';\nimport { useGetLogin } from \"../useLogin\";\nimport { Modal, ModalDialog, Button } from \"react-bootstrap\"\n\ninterface WishlishHomepageProps{\n    wishlistClient: WishlistClient;\n}\n\nexport const WishlistHomepage = (props : WishlishHomepageProps) => {\n    const [creating, setCreating] = useState(false);\n    const [nameOfNewWishlist, setNameOfNewWishlist] = useState(\"\");\n    const [creatorIsGiftee, setCreatorIsGiftee] = useState(true);\n    const [wishlistSummaries, setWishlistSummaries] = useState([] as WishlistSummaryModel[]);\n    const history = useHistory();\n    const login = useGetLogin(false);\n    const [show, setShow] = useState(false);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        loadWishListSummaries(login.Email);\n    }, [wishlistSummaries.length]);\n\n    let onClickCancel = () => {\n        setNameOfNewWishlist(\"\");\n        setShow(false);\n    }\n    \n    let onClickCreate = async () => {\n        let newWishlist = await props.wishlistClient.create(nameOfNewWishlist, login.Email, login.Name, creatorIsGiftee);\n        setCreating(false);\n        history.push(\"/wishlist/\" + newWishlist.id);\n        setShow(false);\n    }\n\n    let handleInputChange = (event : ChangeEvent<HTMLInputElement>) => {\n        setNameOfNewWishlist(event.target.value);\n    }\n    \n    let loadWishListSummaries = async (email : string) => {\n        var summaries = await props.wishlistClient.getSummaries(email);\n        setWishlistSummaries(summaries);\n    }\n    \n    let onClickAddWishlist = () => {\n        setShow(true);\n        setTimeout(() => {inputRef?.current?.focus();},0);\n    }\n    \n    let createButtons = <>\n        <Button className='w-100' size='lg' variant=\"outline-primary\" cypress-name='CreateNewWishlist' onClick={onClickAddWishlist}>\n            Create New...\n        </Button>\n\n        <Modal show={show} onHide={onClickCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>Create New Wishlist</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className='input-group input-group-lg'>\n                    <input ref={inputRef} autoFocus={true} type=\"text\" className='w-100 form-control' value={nameOfNewWishlist} onChange={handleInputChange} placeholder='Name of wishlist...' cypress-name='NameOfWishlist'></input>\n                    <div className=\"form-check mt-3\">\n                        <input className=\"form-check-input\" type=\"checkbox\" checked={creatorIsGiftee} id=\"areTheyGiftee\" onChange={(e) => {setCreatorIsGiftee(e.target.checked)}}/>\n                        <label className=\"form-check-label\" htmlFor=\"areTheyGiftee\">\n                            Are you receiving gifts?\n                        </label>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button block={true} variant=\"primary\" size='lg' cypress-name='Create' onClick={onClickCreate}>\n                    Create\n                </Button>\n                <Button block={true} variant=\"secondary\" size='lg' onClick={onClickCancel}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n\n    let summaries =\n        <div className='wishlistSummaries'>\n            {\n                wishlistSummaries.map(s =>\n                    <Link key={s.name} to={`wishlist/${s.id}`}> <div key={s.name} className='wishlistSummaryItem'>{s.name}</div></Link>)\n            }\n            <a>\n                \n            </a>\n        </div>\n\n    return (\n        <div>\n            <h2 className='text-center'>Your Wishlists</h2>\n\n            <div>\n                {createButtons}\n            </div>\n            { summaries }\n        </div>\n    );\n}","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/Wishlist.tsx",["79","80","81","82","83"],"import React, {useState, useEffect, ChangeEvent, useRef} from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\nimport {IWishlistRepository} from \"./IWishlistRepository\";\nimport \"./WishlistSummary.css\";\nimport { useGetLogin } from \"../useLogin\";\nimport {WishlistPersonRow} from \"./WishlistPersonRow\";\nimport {OtherPersonWishlistRow} from \"./OtherPersonWishlistRow\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport {useWishlistClient} from \"./useWishlistClient\";\nimport * as signalR from \"@microsoft/signalr\";\n\ninterface WishlistProps {\n    id: string;\n}\n\ninterface Props extends RouteComponentProps<WishlistProps> {\n    wishlistRepository : IWishlistRepository;\n}\n\n const Wishlist = (props : Props) => {\n     const [wishlist, setWishlist] = useState<WishlistModel|null>(null);\n     const [newPersonName, setNewPersonName] = useState(\"\");\n     const [newPersonEmail, setNewPersonEmail] = useState(\"\");\n     const [newPersonIsGiftee, setNewPersonIsGiftee] = useState(true);    \n     const [addingNewPerson, setAddingNewPerson] = useState(false);\n     const login = useGetLogin(false);\n     let [addingNewPersonButtonDisabled, setAddingNewPersonButtonDisabled] = useState(false);\n     let wishlistClient = useWishlistClient();\n     let nameInputRef = useRef<HTMLInputElement>(null);\n    \n     useEffect(() => {\n        let id = props.match.params.id;\n        props.wishlistRepository.getWishlist(id).then(s => { \n            setWishlist(s);\n        });\n\n         const connection = new signalR.HubConnectionBuilder()\n             .withUrl(\"/wishlisthub\")\n             .build();\n\n         \n\n         connection.start().then(s => {\n             connection.invoke(\"Connect\", id).then(s => {\n                 connection.on(\"UpdateWishlist\", (wishlistModel : WishlistModel) => {\n                     setWishlist(wishlistModel);\n                 });\n             });\n         }).catch(err => document.write(err));\n         \n     }, [wishlist?.id]);\n    \n     let createNewPersonClick = async () => {\n        var newWishlist = await wishlistClient.addPerson(wishlist?.id, newPersonEmail, newPersonName, newPersonIsGiftee);\n        setWishlist(newWishlist);\n        setNewPersonName(\"\");\n        setNewPersonEmail(\"\");\n        setAddingNewPerson(false);\n    }\n    \n     let addPersonButtonShouldBeDisabled = () => {\n         return wishlist?.people?.some(s => s.email === login.Email);\n     }\n     \n     let changeNewEmail = (event : ChangeEvent<HTMLInputElement>) => {\n         let npe = event.target.value;\n         setNewPersonEmail(event.target.value);\n         let f = wishlist?.people?.some(s => s.email === npe) ?? false;\n         setAddingNewPersonButtonDisabled(f);\n     }\n     \n     let clickAddNewPerson = () => {\n         setAddingNewPerson(true);\n         setTimeout(() => nameInputRef?.current?.focus(), 0);\n     }\n\n    if (wishlist) {\n        let onCLickCancelAddNewPerson = () => {\n            setAddingNewPerson(false);\n            setNewPersonName(\"\");\n        }\n        \n        let loggedInWishlist = wishlist.people?.find(s => s.email === login.Email) ?? {} as WishlistPersonModel;\n        let otherGiftees = wishlist.people?.filter(s => s.email !== login.Email && s.giftee === true);\n        let otherNonGiftees = wishlist.people?.filter(s => s.email !== login.Email && s.giftee === false);\n        \n        let createNewPerson = (\n            <>\n                <Button variant=\"outline-dark\" size='lg' cypress-name='AddNewPerson' className='w-100' onClick={clickAddNewPerson}>\n                Add Someone New\n                </Button>\n\n                <Modal show={addingNewPerson} onHide={onCLickCancelAddNewPerson}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add Somone New!</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className='input-group-lg'>\n                            <input type=\"text\" ref={nameInputRef} className='form-control w-100' onChange={(event) => setNewPersonName(event.target.value)}\n                                value={newPersonName} placeholder=\"What's their name?\" cypress-name='NewPersonName'></input>\n                            <input type=\"text\" className='form-control w-100 mt-2' onChange={changeNewEmail}\n                                value={newPersonEmail} placeholder=\"What's their email?\" cypress-name='NewPersonEmail'></input>\n                        </div>\n                        <div className=\"form-check mt-3\">\n                            <input className=\"form-check-input\" type=\"checkbox\" checked={newPersonIsGiftee} id=\"areTheyGiftee\" onChange={(e) => {setNewPersonIsGiftee(e.target.checked)}}/>\n                                <label className=\"form-check-label\" htmlFor=\"areTheyGiftee\">\n                                    Are they receiving gifts?   \n                                </label>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" block={true} size='lg' disabled={addingNewPersonButtonDisabled} onClick={createNewPersonClick} cypress-name='CreateNewPerson'>\n                        Add\n                        </Button>\n                        <Button variant=\"secondary\" block={true} size='lg' onClick={onCLickCancelAddNewPerson}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        )\n        \n        let listOfOtherPeoplesIdeas = (\n            <div className='mt-5'>\n                <hr className='bigLine'></hr>\n                <h3 className='text-center mt-5'>Other people's gift ideas</h3>\n                <div className='wishlistSummaries' cypress-name=\"ListOfPeople\">\n                    {\n                        otherGiftees?.map((s) => \n                            <OtherPersonWishlistRow \n                                cypress-name='WishlistPerson'\n                                key={s.email} \n                                wishlistPerson={s} \n                                wishlistId={wishlist?.id} \n                                loggedInEmail={login.Email}\n                                setWishlist={setWishlist}></OtherPersonWishlistRow> )\n                    }\n                </div>\n            </div>)\n        \n        let otherNonGifteeSection = <div className='mt-5'>\n            <hr className='bigLine'></hr>\n            <h3 className='text-center mt-5'>Gift givers</h3>\n            <table className='table'>\n                {otherNonGiftees?.map(s => `${s.name} (${s.email})`).join(', ')}\n            </table>\n        </div>\n        \n        let addNewItems = <>\n            <h1 className='text-center' id=\"wishlistTitle\">Wishlist - {wishlist.name}</h1>\n\n            <div>\n                <h3 className='text-center mt-4'>What would you like?</h3>\n                <WishlistPersonRow cypress-name='WishlistPerson' wishlistPerson={loggedInWishlist} wishlistId={wishlist.id} setWishlist={setWishlist} loginDetails={login}></WishlistPersonRow>\n            </div>\n        </>\n        \n        return (\n            <div>\n                {loggedInWishlist.giftee ? addNewItems : <></>}\n                \n                <div>\n                    {otherGiftees?.length ?? 0 > 0 ? listOfOtherPeoplesIdeas : <></>}\n                </div>\n                <div>\n                    {otherNonGiftees?.length ?? 0 > 0 ? otherNonGifteeSection : <></>}\n                </div>\n                \n                <div className='mt-5'> {createNewPerson}</div>\n            </div>\n        )\n    }\n\n    return (\n        <div>Loading...</div>\n    );\n}\n\nexport default withRouter(Wishlist);","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Logout.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Login/Login.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/useLogin.ts",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/NavMenu.tsx",[],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/useWishlistClient.tsx",[],["84","85","86"],"/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/OtherPersonWishlistRow.tsx",["87"],"import {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\nimport React from \"react\";\nimport {useWishlistClient} from \"./useWishlistClient\";\nimport Linkify from \"react-linkify\";\n\ninterface OtherPersonWishlistRowProps{\n    wishlistPerson : WishlistPersonModel;\n    loggedInEmail : string;\n    wishlistId: string;\n    setWishlist: (wishlist : WishlistModel) => void;\n}\n\nexport const OtherPersonWishlistRow = (props : OtherPersonWishlistRowProps) => {\n    let wishlistClient = useWishlistClient();\n    \n    let claimPresentClick = async (presentId : string) => {\n        let wishlist = await wishlistClient\n            .claimGift(props.wishlistId, props.loggedInEmail, presentId);\n        props.setWishlist(wishlist);\n    }\n\n    let unclaimPresentClick = async (presentId : string) => {\n        let wishlist = await wishlistClient\n            .unclaimGift(props.wishlistId, presentId);\n        props.setWishlist(wishlist);\n    }\n    let getPresentIdeas = () => {\n        if(props.wishlistPerson.presentIdeas?.length === 0){\n            return <div className='lightGrey text-center'>They haven't added any gift ideas yet!</div>\n        }\n        return props.wishlistPerson.presentIdeas?.map(s => {\n            let claimed = s.claimerEmail !== null && s.claimerEmail !== '';\n            let claimedByYou = s.claimerEmail === props.loggedInEmail;\n            let unclaim = claimedByYou ? <button className='btn btn-lg btn-outline-danger w-100'\n                                                 onClick={() => unclaimPresentClick(s.id)}>Unclaim</button> : null;\n            let claimerText = claimed ? `- claimed by ${claimedByYou ? \"you\" : s.claimerName}` : '';\n            let claimSection = s.claimerName ?\n                <>{unclaim}</> :\n                <button className='btn btn-lg btn-outline-success w-100'\n                        onClick={() => claimPresentClick(s.id)}>Claim</button>;\n\n            let classes = `mt-1 ml-0 mr-0 row ${claimed ? 'claimed' : ''}`;\n            return (\n                <tr key={s.id} className={classes}>\n                    <td className='col-8 col-md-10' cypress-name={`${s.id}-description`}>\n                        <Linkify>{s.description} {claimerText}</Linkify></td>\n                    <td className='col-4 col-md-2 text-right' cypress-name={`${s.id}-buttons`}>{claimSection}</td>\n                </tr>\n            )\n        });\n    }\n    \n    return (\n        <div className='wishlistSummaryItem mb-3' key={`${props.wishlistPerson.email}`}>\n            <div>\n                <span className='d-inline-block col-12 text-center'>\n                    <h4 className='d-inline-block'>{props.wishlistPerson.name}</h4>\n                    <span className='lightGrey'> ({props.wishlistPerson.email})</span>\n                </span>\n            </div>\n            <table className='table'>\n                {getPresentIdeas()}\n            </table>\n        </div>\n    )\n}","/Users/edwardridge/RiderProjects/RidgeList/RidgeList.FrontEnd/ClientApp/src/components/Wishlist/WishlistPersonRow.tsx",["88"],"import React, {useRef, useState} from \"react\";\nimport { LoginDetails } from \"../useLogin\";\nimport {WishlistClient, WishlistModel, WishlistPersonModel} from \"../../nswag/api.generated\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport {useWishlistClient} from \"./useWishlistClient\";\nimport Linkify from \"react-linkify\";\n\ninterface WishlistPersonRowProps{\n    loginDetails : LoginDetails;\n    wishlistPerson : WishlistPersonModel;\n    wishlistId: string;\n    setWishlist: (wishlist : WishlistModel) => void;\n}\n\nexport const WishlistPersonRow = (props : WishlistPersonRowProps) => {\n    const [newItemDescription, setNewItemDescription] = useState(\"\");\n    const [showAddItem, setShowAddItem] = useState(false);\n    const wishlistClient = useWishlistClient();\n    const inputRef = useRef<HTMLTextAreaElement>(null);\n    \n    let clickAddItem = async (closeAddItem: boolean) => {\n        let wishlist = await wishlistClient.addGiftIdea(props.wishlistId, props.loginDetails.Email, newItemDescription);\n        props.setWishlist(wishlist);\n        setNewItemDescription(\"\");\n        if (closeAddItem){\n            setShowAddItem(false);\n        }\n        else{\n            setTimeout(() => inputRef?.current?.focus(),0);\n        }\n            \n    }\n\n    let removePresentIdea = async (id: string) => {\n        let wishlist = await wishlistClient.removeGiftIdea(props.wishlistId, props.loginDetails.Email, id);\n        props.setWishlist(wishlist);\n    }\n\n    let onClickCancelAddItem = () => {\n        setShowAddItem(false);\n    }\n    \n    let clickNewItemButton = () => {\n        setShowAddItem(true);\n        setTimeout(() => inputRef?.current?.focus(),0);\n    }\n\n    let addItems = (\n        <div className='loggedInPersonGifts'>\n            \n            <table className='table '>\n                <tbody>\n                {props.wishlistPerson.presentIdeas?.map(s => {\n                    return (\n                        <tr className='row' key={s.id}>\n                            <td className='col-8 col-md-10'><Linkify>{s.description}</Linkify></td>\n                            <td className='col-4 col-md-2'>\n                                <button className='btn btn-outline-danger w-100 btn-lg' onClick={() => removePresentIdea(s.id)}>Remove</button>\n                            </td>\n                        </tr>)\n                })}\n                </tbody>\n            </table>\n            <div className='mt-2'>\n                \n                <Button variant=\"outline-primary\" size='lg' cypress-name='AddNewItemButton' className='w-100' onClick={clickNewItemButton}>\n                    Add New Gift Idea\n                </Button>\n\n                <Modal show={showAddItem} onHide={onClickCancelAddItem}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add New Gift Idea</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <textarea ref={inputRef} rows={8} className='form-control w-100' value={newItemDescription} onChange={(event) => { setNewItemDescription(event.target.value) }} placeholder='What would you like? You can also include links!' cypress-name='AddItem'></textarea>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button size='lg' block={true} variant=\"primary\" onClick={() => { clickAddItem(false) }}>\n                            Save And Add More\n                        </Button>\n                        <Button size='lg' block={true} variant=\"primary\" cypress-name='SaveItemButton' onClick={() => { clickAddItem(true) }}>\n                            Save And Close\n                        </Button>\n                        <Button size='lg' block={true} variant=\"secondary\" onClick={onClickCancelAddItem}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                \n            </div>\n    </div>\n    );\n   \n    return (\n        \n        <div className='mt-4' key={`${props.wishlistPerson.email}`}>\n            {addItems}\n        </div>\n    )\n}",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":7,"column":17,"nodeType":"98","messageId":"99","endLine":7,"endColumn":28},{"ruleId":"96","severity":1,"message":"100","line":14,"column":12,"nodeType":"98","messageId":"99","endLine":14,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":25,"column":8,"nodeType":"103","endLine":25,"endColumn":34,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":90,"column":13,"nodeType":"107","endLine":90,"endColumn":16},{"ruleId":"96","severity":1,"message":"108","line":3,"column":9,"nodeType":"98","messageId":"99","endLine":3,"endColumn":23},{"ruleId":"101","severity":1,"message":"109","line":52,"column":9,"nodeType":"103","endLine":52,"endColumn":23,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":62,"column":10,"nodeType":"98","messageId":"99","endLine":62,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":164,"column":46,"nodeType":"114","messageId":"115","endLine":164,"endColumn":51},{"ruleId":"112","severity":1,"message":"113","line":167,"column":49,"nodeType":"114","messageId":"115","endLine":167,"endColumn":54},{"ruleId":"89","replacedBy":"116"},{"ruleId":"91","replacedBy":"117"},{"ruleId":"93","replacedBy":"118"},{"ruleId":"96","severity":1,"message":"108","line":1,"column":9,"nodeType":"98","messageId":"99","endLine":1,"endColumn":23},{"ruleId":"96","severity":1,"message":"108","line":3,"column":9,"nodeType":"98","messageId":"99","endLine":3,"endColumn":23},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"jsx-a11y/accessible-emoji",[],[],"@typescript-eslint/no-unused-vars","'ModalDialog' is defined but never used.","Identifier","unusedVar","'creating' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadWishListSummaries' and 'login.Email'. Either include them or remove the dependency array.","ArrayExpression",["121"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'WishlistClient' is defined but never used.","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.wishlistRepository'. Either include them or remove the dependency array.",["122"],"'addPersonButtonShouldBeDisabled' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf",["119"],["120"],[],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [loadWishListSummaries, login.Email, wishlistSummaries.length]",{"range":"127","text":"128"},"Update the dependencies array to be: [props.match.params.id, props.wishlistRepository, wishlist.id]",{"range":"129","text":"130"},[1042,1068],"[loadWishListSummaries, login.Email, wishlistSummaries.length]",[2050,2064],"[props.match.params.id, props.wishlistRepository, wishlist.id]"]