/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class HealthcheckClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Promise<string> {
        let url_ = this.baseUrl + "/Healthcheck";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class UserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    login(emailAddress: string | null | undefined, name: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/User/login?";
        if (emailAddress !== undefined && emailAddress !== null)
            url_ += "emailAddress=" + encodeURIComponent("" + emailAddress) + "&";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    getUserDetails(id: string | undefined): Promise<UserModel> {
        let url_ = this.baseUrl + "/api/User/getDetails?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserDetails(_response);
        });
    }

    protected processGetUserDetails(response: Response): Promise<UserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <UserModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel>(<any>null);
    }

    setUserDetails(userModel: UserModel): Promise<void> {
        let url_ = this.baseUrl + "/api/User/setDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetUserDetails(_response);
        });
    }

    protected processSetUserDetails(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class WishlistClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(nameOfWishlist: string | null | undefined, creatorId: string | undefined, creatorIsGiftee: boolean | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/create?";
        if (nameOfWishlist !== undefined && nameOfWishlist !== null)
            url_ += "nameOfWishlist=" + encodeURIComponent("" + nameOfWishlist) + "&";
        if (creatorId === null)
            throw new Error("The parameter 'creatorId' cannot be null.");
        else if (creatorId !== undefined)
            url_ += "creatorId=" + encodeURIComponent("" + creatorId) + "&";
        if (creatorIsGiftee === null)
            throw new Error("The parameter 'creatorIsGiftee' cannot be null.");
        else if (creatorIsGiftee !== undefined)
            url_ += "creatorIsGiftee=" + encodeURIComponent("" + creatorIsGiftee) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    getWishlist(name: string | null | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/wishlist?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWishlist(_response);
        });
    }

    protected processGetWishlist(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    addPerson(wishlistId: string | undefined, email: string | null | undefined, name: string | null | undefined, isGiftee: boolean | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/addPerson?";
        if (wishlistId === null)
            throw new Error("The parameter 'wishlistId' cannot be null.");
        else if (wishlistId !== undefined)
            url_ += "wishlistId=" + encodeURIComponent("" + wishlistId) + "&";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (isGiftee === null)
            throw new Error("The parameter 'isGiftee' cannot be null.");
        else if (isGiftee !== undefined)
            url_ += "isGiftee=" + encodeURIComponent("" + isGiftee) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddPerson(_response);
        });
    }

    protected processAddPerson(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    addGiftIdea(wishlistId: string | undefined, personId: string | undefined, description: string | null | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/addGiftIdea?";
        if (wishlistId === null)
            throw new Error("The parameter 'wishlistId' cannot be null.");
        else if (wishlistId !== undefined)
            url_ += "wishlistId=" + encodeURIComponent("" + wishlistId) + "&";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        if (description !== undefined && description !== null)
            url_ += "description=" + encodeURIComponent("" + description) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddGiftIdea(_response);
        });
    }

    protected processAddGiftIdea(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    removeGiftIdea(wishlistId: string | undefined, personId: string | undefined, presentId: string | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/removeGiftIdea?";
        if (wishlistId === null)
            throw new Error("The parameter 'wishlistId' cannot be null.");
        else if (wishlistId !== undefined)
            url_ += "wishlistId=" + encodeURIComponent("" + wishlistId) + "&";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        if (presentId === null)
            throw new Error("The parameter 'presentId' cannot be null.");
        else if (presentId !== undefined)
            url_ += "presentId=" + encodeURIComponent("" + presentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveGiftIdea(_response);
        });
    }

    protected processRemoveGiftIdea(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    claimGift(wishlistId: string | undefined, personid: string | undefined, presentId: string | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/claimGift?";
        if (wishlistId === null)
            throw new Error("The parameter 'wishlistId' cannot be null.");
        else if (wishlistId !== undefined)
            url_ += "wishlistId=" + encodeURIComponent("" + wishlistId) + "&";
        if (personid === null)
            throw new Error("The parameter 'personid' cannot be null.");
        else if (personid !== undefined)
            url_ += "personid=" + encodeURIComponent("" + personid) + "&";
        if (presentId === null)
            throw new Error("The parameter 'presentId' cannot be null.");
        else if (presentId !== undefined)
            url_ += "presentId=" + encodeURIComponent("" + presentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClaimGift(_response);
        });
    }

    protected processClaimGift(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    unclaimGift(wishlistId: string | undefined, presentId: string | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/unclaimGift?";
        if (wishlistId === null)
            throw new Error("The parameter 'wishlistId' cannot be null.");
        else if (wishlistId !== undefined)
            url_ += "wishlistId=" + encodeURIComponent("" + wishlistId) + "&";
        if (presentId === null)
            throw new Error("The parameter 'presentId' cannot be null.");
        else if (presentId !== undefined)
            url_ += "presentId=" + encodeURIComponent("" + presentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUnclaimGift(_response);
        });
    }

    protected processUnclaimGift(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    changeIsGiftee(wishlistId: string | undefined, personId: string | undefined, isGiftee: boolean | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/changeIsGiftee?";
        if (wishlistId === null)
            throw new Error("The parameter 'wishlistId' cannot be null.");
        else if (wishlistId !== undefined)
            url_ += "wishlistId=" + encodeURIComponent("" + wishlistId) + "&";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        if (isGiftee === null)
            throw new Error("The parameter 'isGiftee' cannot be null.");
        else if (isGiftee !== undefined)
            url_ += "isGiftee=" + encodeURIComponent("" + isGiftee) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangeIsGiftee(_response);
        });
    }

    protected processChangeIsGiftee(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    removePerson(wishlistId: string | undefined, personId: string | undefined): Promise<WishlistModel> {
        let url_ = this.baseUrl + "/Wishlist/removePerson?";
        if (wishlistId === null)
            throw new Error("The parameter 'wishlistId' cannot be null.");
        else if (wishlistId !== undefined)
            url_ += "wishlistId=" + encodeURIComponent("" + wishlistId) + "&";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemovePerson(_response);
        });
    }

    protected processRemovePerson(response: Response): Promise<WishlistModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistModel>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistModel>(<any>null);
    }

    getSummaries(personId: string | undefined): Promise<WishlistSummaryModel[]> {
        let url_ = this.baseUrl + "/Wishlist/summaries?";
        if (personId === null)
            throw new Error("The parameter 'personId' cannot be null.");
        else if (personId !== undefined)
            url_ += "personId=" + encodeURIComponent("" + personId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSummaries(_response);
        });
    }

    protected processGetSummaries(response: Response): Promise<WishlistSummaryModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WishlistSummaryModel[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WishlistSummaryModel[]>(<any>null);
    }
}

export class WishlistTestClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createTestUser(req: CreateTestUserModel): Promise<void> {
        let url_ = this.baseUrl + "/WishlistTest/createTestUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTestUser(_response);
        });
    }

    protected processCreateTestUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    createTestWishlist(req: CreateWishlistRequestModel): Promise<string> {
        let url_ = this.baseUrl + "/WishlistTest/createTestWishlist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTestWishlist(_response);
        });
    }

    protected processCreateTestWishlist(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    clearOldTestWishlists(): Promise<void> {
        let url_ = this.baseUrl + "/WishlistTest/clearOldTestWishlists";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClearOldTestWishlists(_response);
        });
    }

    protected processClearOldTestWishlists(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface UserModel {
    id: string;
    name?: string | undefined;
    email?: string | undefined;
}

export interface WishlistModel {
    id: string;
    name?: string | undefined;
    people?: WishlistPersonModel[] | undefined;
}

export interface WishlistPersonModel {
    personId: string;
    name?: string | undefined;
    email?: string | undefined;
    presentIdeas?: PresentIdeaModel[] | undefined;
    giftee: boolean;
}

export interface PresentIdeaModel {
    id: string;
    description?: string | undefined;
    claimerId?: string | undefined;
    claimerName?: string | undefined;
    claimerEmail?: string | undefined;
}

export interface WishlistSummaryModel {
    name?: string | undefined;
    id: string;
}

export interface CreateTestUserModel {
    id: string;
}

export interface CreateWishlistRequestModel {
    title?: string | undefined;
    creatorId: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}