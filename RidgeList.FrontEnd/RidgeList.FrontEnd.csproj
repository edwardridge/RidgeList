<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
        <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
        <UserSecretsId>68d6e019-351c-493d-b031-d481d16e421d</UserSecretsId>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Google.Cloud.SecretManager.V1" Version="1.3.0" />
        <PackageReference Include="MediatR" Version="9.0.0" />
        <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="9.0.0" />
        <PackageReference Include="Microsoft.AspNetCore.SignalR" Version="1.1.0" />
        <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="5.0.1" />
        <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.10.9" />
        <PackageReference Include="NSwag.AspNetCore" Version="13.15.5" />
        <PackageReference Include="NSwag.MSBuild" Version="13.15.5">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <PackageReference Include="OpenTelemetry" Version="1.2.0-rc1" />
        <PackageReference Include="OpenTelemetry.Exporter.Jaeger" Version="1.2.0-rc1" />
        <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.0.0-rc8" />
        <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.0.0-rc8" />
        <PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.0.0-rc8" />
        <PackageReference Include="Honeycomb.OpenTelemetry" Version="0.17.0-beta" />
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**" />
        <Content Include="ClientApp\cypress\tsconfig.json" />
        <None Remove="$(SpaRoot)**" />
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
        <None Remove="ClientApp\src\components\useMaterialStyles.ts" />
        <None Include="ClientApp\cypress.json" />
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Include="..\RidgeList.ApplicationServices\RidgeList.ApplicationServices.csproj" />
      <ProjectReference Include="..\RidgeList.Domain\RidgeList.Domain.csproj" />
      <ProjectReference Include="..\RidgeList.Models\RidgeList.Models.csproj" />
      <ProjectReference Include="..\RidgeList.Postgres\RidgeList.Postgres.csproj" />
    </ItemGroup>

    <ItemGroup>
      <TypeScriptCompile Include="ClientApp\src\components\useMaterialStyles.ts" />
      <TypeScriptCompile Include="ClientApp\src\components\Wishlist\CreateNewPerson.tsx" />
      <TypeScriptCompile Include="ClientApp\src\components\Wishlist\EditWishlist.tsx" />
      <TypeScriptCompile Include="ClientApp\src\components\Wishlist\WishlistSummaryItem.tsx" />
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)build\**" />
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>%(DistFiles.Identity)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>

    <Target Name="NSwag" AfterTargets="Build" Condition="'$(Configuration)' != 'Release'">
        <Exec EnvironmentVariables="ASPNETCORE_ENVIRONMENT=Development" Command="$(NSwagExe_Net60) aspnetcore2openapi /assembly:$(TargetDir)RidgeList.FrontEnd.dll /output:$(OutDir)openapi.json" />
        <Exec Command="$(NSwagExe_Net60) openapi2tsclient /input:$(OutDir)openapi.json /name:API /TypeStyle:Interface /output:ClientApp/src/nswag/api.generated.ts" />
    </Target>
</Project>
